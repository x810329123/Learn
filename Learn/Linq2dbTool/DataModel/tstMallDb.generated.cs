//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Mapping;

namespace DataModels
{
	/// <summary>
	/// Database       : tstMallDB
	/// Data Source    : (localdb)\DEVELOPMENT
	/// Server Version : 13.00.4001
	/// </summary>
	public partial class TstMallDBDB : LinqToDB.Data.DataConnection
	{
		public ITable<AclRecord>                            AclRecords                            { get { return this.GetTable<AclRecord>(); } }
		public ITable<ActivityLog>                          ActivityLogs                          { get { return this.GetTable<ActivityLog>(); } }
		public ITable<ActivityLogType>                      ActivityLogTypes                      { get { return this.GetTable<ActivityLogType>(); } }
		public ITable<Address>                              Addresses                             { get { return this.GetTable<Address>(); } }
		public ITable<AddressAttribute>                     AddressAttributes                     { get { return this.GetTable<AddressAttribute>(); } }
		public ITable<AddressAttributeValue>                AddressAttributeValues                { get { return this.GetTable<AddressAttributeValue>(); } }
		public ITable<Affiliate>                            Affiliates                            { get { return this.GetTable<Affiliate>(); } }
		public ITable<BackInStockSubscription>              BackInStockSubscriptions              { get { return this.GetTable<BackInStockSubscription>(); } }
		public ITable<BlogComment>                          BlogComments                          { get { return this.GetTable<BlogComment>(); } }
		public ITable<BlogPost>                             BlogPosts                             { get { return this.GetTable<BlogPost>(); } }
		public ITable<Campaign>                             Campaigns                             { get { return this.GetTable<Campaign>(); } }
		public ITable<CancelRequest>                        CancelRequests                        { get { return this.GetTable<CancelRequest>(); } }
		public ITable<CancelRequestOrderItemsMapping>       CancelRequestOrderItemsMappings       { get { return this.GetTable<CancelRequestOrderItemsMapping>(); } }
		public ITable<Category>                             Categories                            { get { return this.GetTable<Category>(); } }
		public ITable<CategoryTemplate>                     CategoryTemplates                     { get { return this.GetTable<CategoryTemplate>(); } }
		public ITable<CheckoutAttribute>                    CheckoutAttributes                    { get { return this.GetTable<CheckoutAttribute>(); } }
		public ITable<CheckoutAttributeValue>               CheckoutAttributeValues               { get { return this.GetTable<CheckoutAttributeValue>(); } }
		public ITable<Country>                              Countries                             { get { return this.GetTable<Country>(); } }
		public ITable<CrossSellProduct>                     CrossSellProducts                     { get { return this.GetTable<CrossSellProduct>(); } }
		public ITable<Currency>                             Currencies                            { get { return this.GetTable<Currency>(); } }
		public ITable<Customer>                             Customers                             { get { return this.GetTable<Customer>(); } }
		public ITable<CustomerAddress>                      CustomerAddresses                     { get { return this.GetTable<CustomerAddress>(); } }
		public ITable<CustomerAttribute>                    CustomerAttributes                    { get { return this.GetTable<CustomerAttribute>(); } }
		public ITable<CustomerAttributeValue>               CustomerAttributeValues               { get { return this.GetTable<CustomerAttributeValue>(); } }
		public ITable<CustomerCustomerRoleMapping>          CustomerCustomerRoleMappings          { get { return this.GetTable<CustomerCustomerRoleMapping>(); } }
		public ITable<CustomerPassword>                     CustomerPasswords                     { get { return this.GetTable<CustomerPassword>(); } }
		public ITable<CustomerRole>                         CustomerRoles                         { get { return this.GetTable<CustomerRole>(); } }
		public ITable<DeliveryDate>                         DeliveryDates                         { get { return this.GetTable<DeliveryDate>(); } }
		public ITable<Discount>                             Discounts                             { get { return this.GetTable<Discount>(); } }
		public ITable<DiscountAppliedToCategory>            DiscountAppliedToCategories           { get { return this.GetTable<DiscountAppliedToCategory>(); } }
		public ITable<DiscountAppliedToManufacturer>        DiscountAppliedToManufacturers        { get { return this.GetTable<DiscountAppliedToManufacturer>(); } }
		public ITable<DiscountAppliedToProduct>             DiscountAppliedToProducts             { get { return this.GetTable<DiscountAppliedToProduct>(); } }
		public ITable<DiscountRequirement>                  DiscountRequirements                  { get { return this.GetTable<DiscountRequirement>(); } }
		public ITable<DiscountUsageHistory>                 DiscountUsageHistories                { get { return this.GetTable<DiscountUsageHistory>(); } }
		public ITable<Download>                             Downloads                             { get { return this.GetTable<Download>(); } }
		public ITable<EmailAccount>                         EmailAccounts                         { get { return this.GetTable<EmailAccount>(); } }
		public ITable<ExternalAuthenticationRecord>         ExternalAuthenticationRecords         { get { return this.GetTable<ExternalAuthenticationRecord>(); } }
		public ITable<ForumsForum>                          ForumsFora                            { get { return this.GetTable<ForumsForum>(); } }
		public ITable<ForumsGroup>                          ForumsGroups                          { get { return this.GetTable<ForumsGroup>(); } }
		public ITable<ForumsPost>                           ForumsPosts                           { get { return this.GetTable<ForumsPost>(); } }
		public ITable<ForumsPostVote>                       ForumsPostVotes                       { get { return this.GetTable<ForumsPostVote>(); } }
		public ITable<ForumsPrivateMessage>                 ForumsPrivateMessages                 { get { return this.GetTable<ForumsPrivateMessage>(); } }
		public ITable<ForumsSubscription>                   ForumsSubscriptions                   { get { return this.GetTable<ForumsSubscription>(); } }
		public ITable<ForumsTopic>                          ForumsTopics                          { get { return this.GetTable<ForumsTopic>(); } }
		public ITable<GdprConsent>                          GdprConsents                          { get { return this.GetTable<GdprConsent>(); } }
		public ITable<GdprLog>                              GdprLogs                              { get { return this.GetTable<GdprLog>(); } }
		public ITable<GenericAttribute>                     GenericAttributes                     { get { return this.GetTable<GenericAttribute>(); } }
		public ITable<GiftCard>                             GiftCards                             { get { return this.GetTable<GiftCard>(); } }
		public ITable<GiftCardUsageHistory>                 GiftCardUsageHistories                { get { return this.GetTable<GiftCardUsageHistory>(); } }
		public ITable<HeaderBanner>                         HeaderBanners                         { get { return this.GetTable<HeaderBanner>(); } }
		/// <summary>
		/// ?????????
		/// </summary>
		public ITable<JoinClubOrder>                        JoinClubOrders                        { get { return this.GetTable<JoinClubOrder>(); } }
		public ITable<Language>                             Languages                             { get { return this.GetTable<Language>(); } }
		public ITable<LocaleStringResource>                 LocaleStringResources                 { get { return this.GetTable<LocaleStringResource>(); } }
		public ITable<LocalizedProperty>                    LocalizedProperties                   { get { return this.GetTable<LocalizedProperty>(); } }
		public ITable<Log>                                  Logs                                  { get { return this.GetTable<Log>(); } }
		public ITable<Manufacturer>                         Manufacturers                         { get { return this.GetTable<Manufacturer>(); } }
		public ITable<ManufacturerTemplate>                 ManufacturerTemplates                 { get { return this.GetTable<ManufacturerTemplate>(); } }
		public ITable<MeasureDimension>                     MeasureDimensions                     { get { return this.GetTable<MeasureDimension>(); } }
		public ITable<MeasureWeight>                        MeasureWeights                        { get { return this.GetTable<MeasureWeight>(); } }
		public ITable<MessageTemplate>                      MessageTemplates                      { get { return this.GetTable<MessageTemplate>(); } }
		public ITable<MigrationVersionInfo>                 MigrationVersionInfo                  { get { return this.GetTable<MigrationVersionInfo>(); } }
		public ITable<News>                                 News                                  { get { return this.GetTable<News>(); } }
		public ITable<NewsComment>                          NewsComments                          { get { return this.GetTable<NewsComment>(); } }
		public ITable<NewsLetterSubscription>               NewsLetterSubscriptions               { get { return this.GetTable<NewsLetterSubscription>(); } }
		public ITable<Order>                                Orders                                { get { return this.GetTable<Order>(); } }
		/// <summary>
		/// ?????????
		/// </summary>
		public ITable<OrderBatchCancelTask>                 OrderBatchCancelTasks                 { get { return this.GetTable<OrderBatchCancelTask>(); } }
		public ITable<OrderItem>                            OrderItems                            { get { return this.GetTable<OrderItem>(); } }
		public ITable<OrderItemUpdate>                      OrderItemUpdates                      { get { return this.GetTable<OrderItemUpdate>(); } }
		public ITable<OrderNote>                            OrderNotes                            { get { return this.GetTable<OrderNote>(); } }
		public ITable<PagesDetail>                          PagesDetails                          { get { return this.GetTable<PagesDetail>(); } }
		public ITable<PermissionRecord>                     PermissionRecords                     { get { return this.GetTable<PermissionRecord>(); } }
		public ITable<PermissionRecordRoleMapping>          PermissionRecordRoleMappings          { get { return this.GetTable<PermissionRecordRoleMapping>(); } }
		public ITable<Picture>                              Pictures                              { get { return this.GetTable<Picture>(); } }
		public ITable<PictureBinary>                        PictureBinaries                       { get { return this.GetTable<PictureBinary>(); } }
		public ITable<Poll>                                 Polls                                 { get { return this.GetTable<Poll>(); } }
		public ITable<PollAnswer>                           PollAnswers                           { get { return this.GetTable<PollAnswer>(); } }
		public ITable<PollVotingRecord>                     PollVotingRecords                     { get { return this.GetTable<PollVotingRecord>(); } }
		public ITable<PredefinedProductAttributeValue>      PredefinedProductAttributeValues      { get { return this.GetTable<PredefinedProductAttributeValue>(); } }
		public ITable<Product>                              Products                              { get { return this.GetTable<Product>(); } }
		public ITable<ProductAttribute>                     ProductAttributes                     { get { return this.GetTable<ProductAttribute>(); } }
		public ITable<ProductAttributeCombination>          ProductAttributeCombinations          { get { return this.GetTable<ProductAttributeCombination>(); } }
		public ITable<ProductAttributeValue>                ProductAttributeValues                { get { return this.GetTable<ProductAttributeValue>(); } }
		public ITable<ProductAvailabilityRange>             ProductAvailabilityRanges             { get { return this.GetTable<ProductAvailabilityRange>(); } }
		public ITable<ProductCategoryMapping>               ProductCategoryMappings               { get { return this.GetTable<ProductCategoryMapping>(); } }
		public ITable<ProductManufacturerMapping>           ProductManufacturerMappings           { get { return this.GetTable<ProductManufacturerMapping>(); } }
		public ITable<ProductPictureMapping>                ProductPictureMappings                { get { return this.GetTable<ProductPictureMapping>(); } }
		public ITable<ProductProductAttributeMapping>       ProductProductAttributeMappings       { get { return this.GetTable<ProductProductAttributeMapping>(); } }
		public ITable<ProductProductTagMapping>             ProductProductTagMappings             { get { return this.GetTable<ProductProductTagMapping>(); } }
		public ITable<ProductReview>                        ProductReviews                        { get { return this.GetTable<ProductReview>(); } }
		public ITable<ProductReviewHelpfulness>             ProductReviewHelpfulnesses            { get { return this.GetTable<ProductReviewHelpfulness>(); } }
		public ITable<ProductReviewReviewTypeMapping>       ProductReviewReviewTypeMappings       { get { return this.GetTable<ProductReviewReviewTypeMapping>(); } }
		public ITable<ProductSpecificationAttributeMapping> ProductSpecificationAttributeMappings { get { return this.GetTable<ProductSpecificationAttributeMapping>(); } }
		public ITable<ProductTag>                           ProductTags                           { get { return this.GetTable<ProductTag>(); } }
		public ITable<ProductTemplate>                      ProductTemplates                      { get { return this.GetTable<ProductTemplate>(); } }
		public ITable<ProductWarehouseInventory>            ProductWarehouseInventories           { get { return this.GetTable<ProductWarehouseInventory>(); } }
		public ITable<QueuedEmail>                          QueuedEmails                          { get { return this.GetTable<QueuedEmail>(); } }
		public ITable<RecurringPayment>                     RecurringPayments                     { get { return this.GetTable<RecurringPayment>(); } }
		public ITable<RecurringPaymentHistory>              RecurringPaymentHistories             { get { return this.GetTable<RecurringPaymentHistory>(); } }
		public ITable<RelatedProduct>                       RelatedProducts                       { get { return this.GetTable<RelatedProduct>(); } }
		public ITable<ReturnRequest>                        ReturnRequests                        { get { return this.GetTable<ReturnRequest>(); } }
		public ITable<ReturnRequestAction>                  ReturnRequestActions                  { get { return this.GetTable<ReturnRequestAction>(); } }
		public ITable<ReturnRequestReason>                  ReturnRequestReasons                  { get { return this.GetTable<ReturnRequestReason>(); } }
		public ITable<ReviewType>                           ReviewTypes                           { get { return this.GetTable<ReviewType>(); } }
		public ITable<RewardPointsHistory>                  RewardPointsHistories                 { get { return this.GetTable<RewardPointsHistory>(); } }
		public ITable<ScheduleTask>                         ScheduleTasks                         { get { return this.GetTable<ScheduleTask>(); } }
		public ITable<SearchTerm>                           SearchTerms                           { get { return this.GetTable<SearchTerm>(); } }
		public ITable<Setting>                              Settings                              { get { return this.GetTable<Setting>(); } }
		public ITable<Shipment>                             Shipments                             { get { return this.GetTable<Shipment>(); } }
		public ITable<ShipmentItem>                         ShipmentItems                         { get { return this.GetTable<ShipmentItem>(); } }
		public ITable<ShippingByWeightByTotalRecord>        ShippingByWeightByTotalRecords        { get { return this.GetTable<ShippingByWeightByTotalRecord>(); } }
		public ITable<ShippingMethod>                       ShippingMethods                       { get { return this.GetTable<ShippingMethod>(); } }
		public ITable<ShippingMethodRestriction>            ShippingMethodRestrictions            { get { return this.GetTable<ShippingMethodRestriction>(); } }
		public ITable<ShoppingCartItem>                     ShoppingCartItems                     { get { return this.GetTable<ShoppingCartItem>(); } }
		public ITable<ShortenUrl>                           ShortenUrls                           { get { return this.GetTable<ShortenUrl>(); } }
		public ITable<SpecificationAttribute>               SpecificationAttributes               { get { return this.GetTable<SpecificationAttribute>(); } }
		public ITable<SpecificationAttributeOption>         SpecificationAttributeOptions         { get { return this.GetTable<SpecificationAttributeOption>(); } }
		public ITable<SsAsAnywhereSlider>                   SsAsAnywhereSliders                   { get { return this.GetTable<SsAsAnywhereSlider>(); } }
		public ITable<SsAsSliderImage>                      SsAsSliderImages                      { get { return this.GetTable<SsAsSliderImage>(); } }
		public ITable<SsCCondition>                         SsCConditions                         { get { return this.GetTable<SsCCondition>(); } }
		public ITable<SsCConditionGroup>                    SsCConditionGroups                    { get { return this.GetTable<SsCConditionGroup>(); } }
		public ITable<SsCConditionStatement>                SsCConditionStatements                { get { return this.GetTable<SsCConditionStatement>(); } }
		public ITable<SsCCustomerOverride>                  SsCCustomerOverrides                  { get { return this.GetTable<SsCCustomerOverride>(); } }
		public ITable<SsCEntityCondition>                   SsCEntityConditions                   { get { return this.GetTable<SsCEntityCondition>(); } }
		public ITable<SsCProductOverride>                   SsCProductOverrides                   { get { return this.GetTable<SsCProductOverride>(); } }
		public ITable<SsEsEntitySetting>                    SsEsEntitySettings                    { get { return this.GetTable<SsEsEntitySetting>(); } }
		public ITable<SsJcJCarousel>                        SsJcJCarousels                        { get { return this.GetTable<SsJcJCarousel>(); } }
		public ITable<SsMapEntityMapping>                   SsMapEntityMappings                   { get { return this.GetTable<SsMapEntityMapping>(); } }
		public ITable<SsMapEntityWidgetMapping>             SsMapEntityWidgetMappings             { get { return this.GetTable<SsMapEntityWidgetMapping>(); } }
		public ITable<SsMmMenu>                             SsMmMenus                             { get { return this.GetTable<SsMmMenu>(); } }
		public ITable<SsMmMenuItem>                         SsMmMenuItems                         { get { return this.GetTable<SsMmMenuItem>(); } }
		public ITable<SsPrCategoryPageRibbon>               SsPrCategoryPageRibbons               { get { return this.GetTable<SsPrCategoryPageRibbon>(); } }
		public ITable<SsPrProductPageRibbon>                SsPrProductPageRibbons                { get { return this.GetTable<SsPrProductPageRibbon>(); } }
		public ITable<SsPrProductRibbon>                    SsPrProductRibbons                    { get { return this.GetTable<SsPrProductRibbon>(); } }
		public ITable<SsPrRibbonPicture>                    SsPrRibbonPictures                    { get { return this.GetTable<SsPrRibbonPicture>(); } }
		public ITable<SsQtTab>                              SsQtTabs                              { get { return this.GetTable<SsQtTab>(); } }
		public ITable<SsRbCategory>                         SsRbCategories                        { get { return this.GetTable<SsRbCategory>(); } }
		public ITable<SsRbPost>                             SsRbPosts                             { get { return this.GetTable<SsRbPost>(); } }
		public ITable<SsRbRelatedBlog>                      SsRbRelatedBlogs                      { get { return this.GetTable<SsRbRelatedBlog>(); } }
		public ITable<SsRbRichBlogPostCategoryMapping>      SsRbRichBlogPostCategoryMappings      { get { return this.GetTable<SsRbRichBlogPostCategoryMapping>(); } }
		public ITable<SsSotdSaleOfTheDayOffer>              SsSotdSaleOfTheDayOffers              { get { return this.GetTable<SsSotdSaleOfTheDayOffer>(); } }
		public ITable<SsSpcProductsGroup>                   SsSpcProductsGroups                   { get { return this.GetTable<SsSpcProductsGroup>(); } }
		public ITable<SsSpcProductsGroupItem>               SsSpcProductsGroupItems               { get { return this.GetTable<SsSpcProductsGroupItem>(); } }
		public ITable<SsSSchedule>                          SsSSchedules                          { get { return this.GetTable<SsSSchedule>(); } }
		public ITable<StateProvince>                        StateProvinces                        { get { return this.GetTable<StateProvince>(); } }
		public ITable<StockQuantityHistory>                 StockQuantityHistories                { get { return this.GetTable<StockQuantityHistory>(); } }
		public ITable<Store>                                Stores                                { get { return this.GetTable<Store>(); } }
		public ITable<StoreMapping>                         StoreMappings                         { get { return this.GetTable<StoreMapping>(); } }
		public ITable<TaxCategory>                          TaxCategories                         { get { return this.GetTable<TaxCategory>(); } }
		public ITable<TaxRate>                              TaxRates                              { get { return this.GetTable<TaxRate>(); } }
		public ITable<Test>                                 Tests                                 { get { return this.GetTable<Test>(); } }
		public ITable<TestIdentity>                         TestIdentities                        { get { return this.GetTable<TestIdentity>(); } }
		public ITable<TierPrice>                            TierPrices                            { get { return this.GetTable<TierPrice>(); } }
		public ITable<Topic>                                Topics                                { get { return this.GetTable<Topic>(); } }
		public ITable<TopicTemplate>                        TopicTemplates                        { get { return this.GetTable<TopicTemplate>(); } }
		public ITable<UrlRecord>                            UrlRecords                            { get { return this.GetTable<UrlRecord>(); } }
		public ITable<Vendor>                               Vendors                               { get { return this.GetTable<Vendor>(); } }
		public ITable<VendorAttribute>                      VendorAttributes                      { get { return this.GetTable<VendorAttribute>(); } }
		public ITable<VendorAttributeValue>                 VendorAttributeValues                 { get { return this.GetTable<VendorAttributeValue>(); } }
		public ITable<VendorNote>                           VendorNotes                           { get { return this.GetTable<VendorNote>(); } }
		public ITable<Warehouse>                            Warehouses                            { get { return this.GetTable<Warehouse>(); } }
		public ITable<WidgetsList>                          WidgetsLists                          { get { return this.GetTable<WidgetsList>(); } }

		public TstMallDBDB()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public TstMallDBDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();

		#region Table Functions

		#region NopSplitstringToTable

		[Sql.TableFunction(Schema="dbo", Name="nop_splitstring_to_table")]
		public ITable<NopSplitstringToTableResult> NopSplitstringToTable(string @string, char? @delimiter)
		{
			return this.GetTable<NopSplitstringToTableResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				@string,
				@delimiter);
		}

		public partial class NopSplitstringToTableResult
		{
			public string data { get; set; }
		}

		#endregion

		#endregion
	}

	[Table(Schema="dbo", Name="AclRecord")]
	public partial class AclRecord
	{
		[PrimaryKey, Identity] public int    Id             { get; set; } // int
		[Column,     NotNull ] public int    EntityId       { get; set; } // int
		[Column,     NotNull ] public string EntityName     { get; set; } // nvarchar(400)
		[Column,     NotNull ] public int    CustomerRoleId { get; set; } // int

		#region Associations

		/// <summary>
		/// AclRecord_CustomerRole
		/// </summary>
		[Association(ThisKey="CustomerRoleId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="AclRecord_CustomerRole", BackReferenceName="AclRecords")]
		public CustomerRole CustomerRole { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="ActivityLog")]
	public partial class ActivityLog
	{
		[PrimaryKey, Identity   ] public int      Id                { get; set; } // int
		[Column,     NotNull    ] public int      ActivityLogTypeId { get; set; } // int
		[Column,     NotNull    ] public int      CustomerId        { get; set; } // int
		[Column,     NotNull    ] public string   Comment           { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public DateTime CreatedOnUtc      { get; set; } // datetime2(7)
		[Column,        Nullable] public string   IpAddress         { get; set; } // nvarchar(200)
		[Column,        Nullable] public int?     EntityId          { get; set; } // int
		[Column,        Nullable] public string   EntityName        { get; set; } // nvarchar(400)

		#region Associations

		/// <summary>
		/// ActivityLog_ActivityLogType
		/// </summary>
		[Association(ThisKey="ActivityLogTypeId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ActivityLog_ActivityLogType", BackReferenceName="ActivityLogs")]
		public ActivityLogType ActivityLogType { get; set; }

		/// <summary>
		/// ActivityLog_Customer
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ActivityLog_Customer", BackReferenceName="ActivityLogs")]
		public Customer Customer { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="ActivityLogType")]
	public partial class ActivityLogType
	{
		[PrimaryKey, Identity] public int    Id            { get; set; } // int
		[Column,     NotNull ] public string SystemKeyword { get; set; } // nvarchar(100)
		[Column,     NotNull ] public string Name          { get; set; } // nvarchar(200)
		[Column,     NotNull ] public bool   Enabled       { get; set; } // bit

		#region Associations

		/// <summary>
		/// ActivityLog_ActivityLogType_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ActivityLogTypeId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ActivityLog> ActivityLogs { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Address")]
	public partial class Address
	{
		[PrimaryKey, Identity   ] public int      Id               { get; set; } // int
		[Column,        Nullable] public string   FirstName        { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   LastName         { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   Email            { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   Company          { get; set; } // nvarchar(max)
		[Column,        Nullable] public int?     CountryId        { get; set; } // int
		[Column,        Nullable] public int?     StateProvinceId  { get; set; } // int
		[Column,        Nullable] public string   City             { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   Address1         { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   Address2         { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   ZipPostalCode    { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   PhoneNumber      { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   FaxNumber        { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   CustomAttributes { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public DateTime CreatedOnUtc     { get; set; } // datetime2(7)
		[Column,        Nullable] public string   County           { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   Notes            { get; set; } // nvarchar(max)

		#region Associations

		/// <summary>
		/// Affiliate_Address_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="AddressId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Affiliate> Affiliates { get; set; }

		/// <summary>
		/// Address_Country
		/// </summary>
		[Association(ThisKey="CountryId", OtherKey="Id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="Address_Country", BackReferenceName="Addresses")]
		public Country Country { get; set; }

		/// <summary>
		/// Customer_Addresses_Target_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="AddressId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<CustomerAddress> CustomerAddressesTargets { get; set; }

		/// <summary>
		/// Customer_BillingAddress_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="BillingAddressId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Customer> CustomerBillingAddresses { get; set; }

		/// <summary>
		/// Customer_ShippingAddress_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ShippingAddressId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Customer> CustomerShippingAddresses { get; set; }

		/// <summary>
		/// Order_BillingAddress_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="BillingAddressId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Order> OrderBillingAddresses { get; set; }

		/// <summary>
		/// Order_PickupAddress_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="PickupAddressId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Order> OrderPickupAddresses { get; set; }

		/// <summary>
		/// Order_ShippingAddress_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ShippingAddressId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Order> OrderShippingAddresses { get; set; }

		/// <summary>
		/// Address_StateProvince
		/// </summary>
		[Association(ThisKey="StateProvinceId", OtherKey="Id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="Address_StateProvince", BackReferenceName="Addresses")]
		public StateProvince StateProvince { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="AddressAttribute")]
	public partial class AddressAttribute
	{
		[PrimaryKey, Identity] public int    Id                     { get; set; } // int
		[Column,     NotNull ] public string Name                   { get; set; } // nvarchar(400)
		[Column,     NotNull ] public bool   IsRequired             { get; set; } // bit
		[Column,     NotNull ] public int    AttributeControlTypeId { get; set; } // int
		[Column,     NotNull ] public int    DisplayOrder           { get; set; } // int

		#region Associations

		/// <summary>
		/// AddressAttributeValue_AddressAttribute_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="AddressAttributeId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<AddressAttributeValue> AddressAttributeValues { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="AddressAttributeValue")]
	public partial class AddressAttributeValue
	{
		[PrimaryKey, Identity] public int    Id                 { get; set; } // int
		[Column,     NotNull ] public int    AddressAttributeId { get; set; } // int
		[Column,     NotNull ] public string Name               { get; set; } // nvarchar(400)
		[Column,     NotNull ] public bool   IsPreSelected      { get; set; } // bit
		[Column,     NotNull ] public int    DisplayOrder       { get; set; } // int

		#region Associations

		/// <summary>
		/// AddressAttributeValue_AddressAttribute
		/// </summary>
		[Association(ThisKey="AddressAttributeId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="AddressAttributeValue_AddressAttribute", BackReferenceName="AddressAttributeValues")]
		public AddressAttribute AddressAttribute { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Affiliate")]
	public partial class Affiliate
	{
		[PrimaryKey, Identity   ] public int    Id              { get; set; } // int
		[Column,     NotNull    ] public int    AddressId       { get; set; } // int
		[Column,        Nullable] public string AdminComment    { get; set; } // nvarchar(max)
		[Column,        Nullable] public string FriendlyUrlName { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool   Deleted         { get; set; } // bit
		[Column,     NotNull    ] public bool   Active          { get; set; } // bit

		#region Associations

		/// <summary>
		/// Affiliate_Address
		/// </summary>
		[Association(ThisKey="AddressId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Affiliate_Address", BackReferenceName="Affiliates")]
		public Address Address { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="BackInStockSubscription")]
	public partial class BackInStockSubscription
	{
		[PrimaryKey, Identity] public int      Id           { get; set; } // int
		[Column,     NotNull ] public int      StoreId      { get; set; } // int
		[Column,     NotNull ] public int      ProductId    { get; set; } // int
		[Column,     NotNull ] public int      CustomerId   { get; set; } // int
		[Column,     NotNull ] public DateTime CreatedOnUtc { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// BackInStockSubscription_Customer
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="BackInStockSubscription_Customer", BackReferenceName="BackInStockSubscriptions")]
		public Customer Customer { get; set; }

		/// <summary>
		/// BackInStockSubscription_Product
		/// </summary>
		[Association(ThisKey="ProductId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="BackInStockSubscription_Product", BackReferenceName="BackInStockSubscriptions")]
		public Product Product { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="BlogComment")]
	public partial class BlogComment
	{
		[PrimaryKey, Identity   ] public int      Id           { get; set; } // int
		[Column,     NotNull    ] public int      CustomerId   { get; set; } // int
		[Column,        Nullable] public string   CommentText  { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool     IsApproved   { get; set; } // bit
		[Column,     NotNull    ] public int      StoreId      { get; set; } // int
		[Column,     NotNull    ] public int      BlogPostId   { get; set; } // int
		[Column,     NotNull    ] public DateTime CreatedOnUtc { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// BlogComment_BlogPost
		/// </summary>
		[Association(ThisKey="BlogPostId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="BlogComment_BlogPost", BackReferenceName="BlogComments")]
		public BlogPost BlogPost { get; set; }

		/// <summary>
		/// BlogComment_Customer
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="BlogComment_Customer", BackReferenceName="BlogComments")]
		public Customer Customer { get; set; }

		/// <summary>
		/// BlogComment_Store
		/// </summary>
		[Association(ThisKey="StoreId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="BlogComment_Store", BackReferenceName="BlogComments")]
		public Store Store { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="BlogPost")]
	public partial class BlogPost
	{
		[PrimaryKey, Identity   ] public int       Id               { get; set; } // int
		[Column,     NotNull    ] public int       LanguageId       { get; set; } // int
		[Column,     NotNull    ] public string    Title            { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public string    Body             { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    BodyOverview     { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool      AllowComments    { get; set; } // bit
		[Column,        Nullable] public string    Tags             { get; set; } // nvarchar(max)
		[Column,        Nullable] public DateTime? StartDateUtc     { get; set; } // datetime2(7)
		[Column,        Nullable] public DateTime? EndDateUtc       { get; set; } // datetime2(7)
		[Column,        Nullable] public string    MetaKeywords     { get; set; } // nvarchar(400)
		[Column,        Nullable] public string    MetaDescription  { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    MetaTitle        { get; set; } // nvarchar(400)
		[Column,     NotNull    ] public bool      LimitedToStores  { get; set; } // bit
		[Column,     NotNull    ] public DateTime  CreatedOnUtc     { get; set; } // datetime2(7)
		[Column,     NotNull    ] public bool      IncludeInSitemap { get; set; } // bit

		#region Associations

		/// <summary>
		/// BlogComment_BlogPost_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="BlogPostId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<BlogComment> BlogComments { get; set; }

		/// <summary>
		/// BlogPost_Language
		/// </summary>
		[Association(ThisKey="LanguageId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="BlogPost_Language", BackReferenceName="BlogPosts")]
		public Language Language { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Campaign")]
	public partial class Campaign
	{
		[PrimaryKey, Identity   ] public int       Id                    { get; set; } // int
		[Column,     NotNull    ] public string    Name                  { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public string    Subject               { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public string    Body                  { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int       StoreId               { get; set; } // int
		[Column,     NotNull    ] public int       CustomerRoleId        { get; set; } // int
		[Column,     NotNull    ] public DateTime  CreatedOnUtc          { get; set; } // datetime2(7)
		[Column,        Nullable] public DateTime? DontSendBeforeDateUtc { get; set; } // datetime2(7)
	}

	[Table(Schema="dbo", Name="CancelRequest")]
	public partial class CancelRequest
	{
		[PrimaryKey, Identity   ] public int       Id                    { get; set; } // int
		[Column,        Nullable] public string    CustomNumber          { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int       StoreId               { get; set; } // int
		[Column,     NotNull    ] public int       OrderId               { get; set; } // int
		[Column,     NotNull    ] public int       CancelRequestStatusId { get; set; } // int
		[Column,     NotNull    ] public DateTime  CreatedOnUtc          { get; set; } // datetime
		[Column,     NotNull    ] public DateTime  UpdatedOnUtc          { get; set; } // datetime
		[Column,        Nullable] public string    StayfunRefundNo       { get; set; } // nvarchar(max)
		[Column,        Nullable] public int?      StayfunRefundAmount   { get; set; } // int
		[Column,        Nullable] public DateTime? RefundedOnUtc         { get; set; } // datetime

		#region Associations

		/// <summary>
		/// CancelRequest_OrderItems_Source_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CancelRequestId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<CancelRequestOrderItemsMapping> OrderItemsSources { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="CancelRequest_OrderItems_Mapping")]
	public partial class CancelRequestOrderItemsMapping
	{
		[Column("CancelRequest_Id"), PrimaryKey(1), NotNull] public int CancelRequestId { get; set; } // int
		[Column("OrderItem_Id"),     PrimaryKey(2), NotNull] public int OrderItemId     { get; set; } // int
		[Column(),                                  NotNull] public int Quantity        { get; set; } // int
		[Column(),                                  NotNull] public int RefundAmount    { get; set; } // int

		#region Associations

		/// <summary>
		/// CancelRequest_OrderItems_Source
		/// </summary>
		[Association(ThisKey="CancelRequestId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="CancelRequest_OrderItems_Source", BackReferenceName="OrderItemsSources")]
		public CancelRequest CancelRequest { get; set; }

		/// <summary>
		/// CancelRequest_OrderItems_Target
		/// </summary>
		[Association(ThisKey="OrderItemId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="CancelRequest_OrderItems_Target", BackReferenceName="CancelRequestOrderItemsTargets")]
		public OrderItem OrderItem { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Category")]
	public partial class Category
	{
		[PrimaryKey, Identity   ] public int      Id                             { get; set; } // int
		[Column,     NotNull    ] public string   Name                           { get; set; } // nvarchar(400)
		[Column,        Nullable] public string   Description                    { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int      CategoryTemplateId             { get; set; } // int
		[Column,        Nullable] public string   MetaKeywords                   { get; set; } // nvarchar(400)
		[Column,        Nullable] public string   MetaDescription                { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   MetaTitle                      { get; set; } // nvarchar(400)
		[Column,     NotNull    ] public int      ParentCategoryId               { get; set; } // int
		[Column,     NotNull    ] public int      PictureId                      { get; set; } // int
		[Column,     NotNull    ] public int      PageSize                       { get; set; } // int
		[Column,     NotNull    ] public bool     AllowCustomersToSelectPageSize { get; set; } // bit
		[Column,        Nullable] public string   PageSizeOptions                { get; set; } // nvarchar(200)
		[Column,        Nullable] public string   PriceRanges                    { get; set; } // nvarchar(400)
		[Column,     NotNull    ] public bool     ShowOnHomepage                 { get; set; } // bit
		[Column,     NotNull    ] public bool     IncludeInTopMenu               { get; set; } // bit
		[Column,     NotNull    ] public bool     SubjectToAcl                   { get; set; } // bit
		[Column,     NotNull    ] public bool     LimitedToStores                { get; set; } // bit
		[Column,     NotNull    ] public bool     Published                      { get; set; } // bit
		[Column,     NotNull    ] public bool     Deleted                        { get; set; } // bit
		[Column,     NotNull    ] public int      DisplayOrder                   { get; set; } // int
		[Column,     NotNull    ] public DateTime CreatedOnUtc                   { get; set; } // datetime2(7)
		[Column,     NotNull    ] public DateTime UpdatedOnUtc                   { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// Discount_AppliedToCategories_Target_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CategoryId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<DiscountAppliedToCategory> DiscountAppliedToCategoriesTargets { get; set; }

		/// <summary>
		/// ProductCategory_Category_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CategoryId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProductCategoryMapping> ProductCategories { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="CategoryTemplate")]
	public partial class CategoryTemplate
	{
		[PrimaryKey, Identity] public int    Id           { get; set; } // int
		[Column,     NotNull ] public string Name         { get; set; } // nvarchar(400)
		[Column,     NotNull ] public string ViewPath     { get; set; } // nvarchar(400)
		[Column,     NotNull ] public int    DisplayOrder { get; set; } // int
	}

	[Table(Schema="dbo", Name="CheckoutAttribute")]
	public partial class CheckoutAttribute
	{
		[PrimaryKey, Identity   ] public int    Id                              { get; set; } // int
		[Column,     NotNull    ] public string Name                            { get; set; } // nvarchar(400)
		[Column,        Nullable] public string TextPrompt                      { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool   IsRequired                      { get; set; } // bit
		[Column,     NotNull    ] public bool   ShippableProductRequired        { get; set; } // bit
		[Column,     NotNull    ] public bool   IsTaxExempt                     { get; set; } // bit
		[Column,     NotNull    ] public int    TaxCategoryId                   { get; set; } // int
		[Column,     NotNull    ] public int    AttributeControlTypeId          { get; set; } // int
		[Column,     NotNull    ] public int    DisplayOrder                    { get; set; } // int
		[Column,     NotNull    ] public bool   LimitedToStores                 { get; set; } // bit
		[Column,        Nullable] public int?   ValidationMinLength             { get; set; } // int
		[Column,        Nullable] public int?   ValidationMaxLength             { get; set; } // int
		[Column,        Nullable] public string ValidationFileAllowedExtensions { get; set; } // nvarchar(max)
		[Column,        Nullable] public int?   ValidationFileMaximumSize       { get; set; } // int
		[Column,        Nullable] public string DefaultValue                    { get; set; } // nvarchar(max)
		[Column,        Nullable] public string ConditionAttributeXml           { get; set; } // nvarchar(max)

		#region Associations

		/// <summary>
		/// CheckoutAttributeValue_CheckoutAttribute_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CheckoutAttributeId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<CheckoutAttributeValue> CheckoutAttributeValues { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="CheckoutAttributeValue")]
	public partial class CheckoutAttributeValue
	{
		[PrimaryKey, Identity   ] public int     Id                  { get; set; } // int
		[Column,     NotNull    ] public int     CheckoutAttributeId { get; set; } // int
		[Column,     NotNull    ] public string  Name                { get; set; } // nvarchar(400)
		[Column,        Nullable] public string  ColorSquaresRgb     { get; set; } // nvarchar(100)
		[Column,     NotNull    ] public decimal PriceAdjustment     { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal WeightAdjustment    { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public bool    IsPreSelected       { get; set; } // bit
		[Column,     NotNull    ] public int     DisplayOrder        { get; set; } // int

		#region Associations

		/// <summary>
		/// CheckoutAttributeValue_CheckoutAttribute
		/// </summary>
		[Association(ThisKey="CheckoutAttributeId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="CheckoutAttributeValue_CheckoutAttribute", BackReferenceName="CheckoutAttributeValues")]
		public CheckoutAttribute CheckoutAttribute { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Country")]
	public partial class Country
	{
		[PrimaryKey, Identity   ] public int    Id                 { get; set; } // int
		[Column,     NotNull    ] public string Name               { get; set; } // nvarchar(100)
		[Column,     NotNull    ] public bool   AllowsBilling      { get; set; } // bit
		[Column,     NotNull    ] public bool   AllowsShipping     { get; set; } // bit
		[Column,        Nullable] public string TwoLetterIsoCode   { get; set; } // nvarchar(2)
		[Column,        Nullable] public string ThreeLetterIsoCode { get; set; } // nvarchar(3)
		[Column,     NotNull    ] public int    NumericIsoCode     { get; set; } // int
		[Column,     NotNull    ] public bool   SubjectToVat       { get; set; } // bit
		[Column,     NotNull    ] public bool   Published          { get; set; } // bit
		[Column,     NotNull    ] public int    DisplayOrder       { get; set; } // int
		[Column,     NotNull    ] public bool   LimitedToStores    { get; set; } // bit

		#region Associations

		/// <summary>
		/// Address_Country_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CountryId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Address> Addresses { get; set; }

		/// <summary>
		/// ShippingMethod_RestrictedCountries_Target_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CountryId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ShippingMethodRestriction> ShippingMethodRestrictedCountriesTargets { get; set; }

		/// <summary>
		/// StateProvince_Country_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CountryId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<StateProvince> StateProvinces { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="CrossSellProduct")]
	public partial class CrossSellProduct
	{
		[PrimaryKey, Identity] public int Id         { get; set; } // int
		[Column,     NotNull ] public int ProductId1 { get; set; } // int
		[Column,     NotNull ] public int ProductId2 { get; set; } // int
	}

	[Table(Schema="dbo", Name="Currency")]
	public partial class Currency
	{
		[PrimaryKey, Identity   ] public int      Id               { get; set; } // int
		[Column,     NotNull    ] public string   Name             { get; set; } // nvarchar(50)
		[Column,     NotNull    ] public string   CurrencyCode     { get; set; } // nvarchar(5)
		[Column,     NotNull    ] public decimal  Rate             { get; set; } // decimal(18, 4)
		[Column,        Nullable] public string   DisplayLocale    { get; set; } // nvarchar(50)
		[Column,        Nullable] public string   CustomFormatting { get; set; } // nvarchar(50)
		[Column,     NotNull    ] public bool     LimitedToStores  { get; set; } // bit
		[Column,     NotNull    ] public bool     Published        { get; set; } // bit
		[Column,     NotNull    ] public int      DisplayOrder     { get; set; } // int
		[Column,     NotNull    ] public DateTime CreatedOnUtc     { get; set; } // datetime2(7)
		[Column,     NotNull    ] public DateTime UpdatedOnUtc     { get; set; } // datetime2(7)
		[Column,     NotNull    ] public int      RoundingTypeId   { get; set; } // int
	}

	[Table(Schema="dbo", Name="Customer")]
	public partial class Customer
	{
		[Column(),                     PrimaryKey,  Identity] public int       Id                      { get; set; } // int
		[Column(),                     NotNull              ] public Guid      CustomerGuid            { get; set; } // uniqueidentifier
		[Column(),                        Nullable          ] public string    Username                { get; set; } // nvarchar(1000)
		[Column(),                        Nullable          ] public string    Email                   { get; set; } // nvarchar(1000)
		[Column(),                        Nullable          ] public string    EmailToRevalidate       { get; set; } // nvarchar(1000)
		[Column(),                        Nullable          ] public string    AdminComment            { get; set; } // nvarchar(max)
		[Column(),                     NotNull              ] public bool      IsTaxExempt             { get; set; } // bit
		[Column(),                     NotNull              ] public int       AffiliateId             { get; set; } // int
		[Column(),                     NotNull              ] public int       VendorId                { get; set; } // int
		[Column(),                     NotNull              ] public bool      HasShoppingCartItems    { get; set; } // bit
		[Column(),                     NotNull              ] public bool      RequireReLogin          { get; set; } // bit
		[Column(),                     NotNull              ] public int       FailedLoginAttempts     { get; set; } // int
		[Column(),                        Nullable          ] public DateTime? CannotLoginUntilDateUtc { get; set; } // datetime2(7)
		[Column(),                     NotNull              ] public bool      Active                  { get; set; } // bit
		[Column(),                     NotNull              ] public bool      Deleted                 { get; set; } // bit
		[Column(),                     NotNull              ] public bool      IsSystemAccount         { get; set; } // bit
		[Column(),                        Nullable          ] public string    SystemName              { get; set; } // nvarchar(400)
		[Column(),                        Nullable          ] public string    LastIpAddress           { get; set; } // nvarchar(max)
		[Column(),                     NotNull              ] public DateTime  CreatedOnUtc            { get; set; } // datetime2(7)
		[Column(),                        Nullable          ] public DateTime? LastLoginDateUtc        { get; set; } // datetime2(7)
		[Column(),                     NotNull              ] public DateTime  LastActivityDateUtc     { get; set; } // datetime2(7)
		[Column(),                     NotNull              ] public int       RegisteredInStoreId     { get; set; } // int
		[Column("BillingAddress_Id"),     Nullable          ] public int?      BillingAddressId        { get; set; } // int
		[Column("ShippingAddress_Id"),    Nullable          ] public int?      ShippingAddressId       { get; set; } // int

		#region Associations

		/// <summary>
		/// ActivityLog_Customer_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ActivityLog> ActivityLogs { get; set; }

		/// <summary>
		/// Customer_Addresses_Source_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<CustomerAddress> AddressesSources { get; set; }

		/// <summary>
		/// BackInStockSubscription_Customer_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<BackInStockSubscription> BackInStockSubscriptions { get; set; }

		/// <summary>
		/// Customer_BillingAddress
		/// </summary>
		[Association(ThisKey="BillingAddressId", OtherKey="Id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="Customer_BillingAddress", BackReferenceName="CustomerBillingAddresses")]
		public Address BillingAddress { get; set; }

		/// <summary>
		/// BlogComment_Customer_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<BlogComment> BlogComments { get; set; }

		/// <summary>
		/// CustomerPassword_Customer_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<CustomerPassword> CustomerPasswords { get; set; }

		/// <summary>
		/// Customer_CustomerRoles_Source_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<CustomerCustomerRoleMapping> CustomerRolesSources { get; set; }

		/// <summary>
		/// ExternalAuthenticationRecord_Customer_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ExternalAuthenticationRecord> ExternalAuthenticationRecords { get; set; }

		/// <summary>
		/// ForumPost_Customer_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ForumsPost> ForumPosts { get; set; }

		/// <summary>
		/// ForumSubscription_Customer_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ForumsSubscription> ForumSubscriptions { get; set; }

		/// <summary>
		/// ForumTopic_Customer_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ForumsTopic> ForumTopics { get; set; }

		/// <summary>
		/// Log_Customer_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Log> Logs { get; set; }

		/// <summary>
		/// NewsComment_Customer_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<NewsComment> NewsComments { get; set; }

		/// <summary>
		/// Order_Customer_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Order> Orders { get; set; }

		/// <summary>
		/// PollVotingRecord_Customer_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<PollVotingRecord> PollVotingRecords { get; set; }

		/// <summary>
		/// PrivateMessage_FromCustomer_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="FromCustomerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ForumsPrivateMessage> PrivateMessageFromCustomers { get; set; }

		/// <summary>
		/// PrivateMessage_ToCustomer_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ToCustomerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ForumsPrivateMessage> PrivateMessageToCustomers { get; set; }

		/// <summary>
		/// ProductReview_Customer_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProductReview> ProductReviews { get; set; }

		/// <summary>
		/// ReturnRequest_Customer_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ReturnRequest> ReturnRequests { get; set; }

		/// <summary>
		/// RewardPointsHistory_Customer_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<RewardPointsHistory> RewardPointsHistories { get; set; }

		/// <summary>
		/// Customer_ShippingAddress
		/// </summary>
		[Association(ThisKey="ShippingAddressId", OtherKey="Id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="Customer_ShippingAddress", BackReferenceName="CustomerShippingAddresses")]
		public Address ShippingAddress { get; set; }

		/// <summary>
		/// ShoppingCartItem_Customer_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ShoppingCartItem> ShoppingCartItems { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="CustomerAddresses")]
	public partial class CustomerAddress
	{
		[Column("Customer_Id"), PrimaryKey(1), NotNull] public int CustomerId { get; set; } // int
		[Column("Address_Id"),  PrimaryKey(2), NotNull] public int AddressId  { get; set; } // int

		#region Associations

		/// <summary>
		/// Customer_Addresses_Target
		/// </summary>
		[Association(ThisKey="AddressId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Customer_Addresses_Target", BackReferenceName="CustomerAddressesTargets")]
		public Address Address { get; set; }

		/// <summary>
		/// Customer_Addresses_Source
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Customer_Addresses_Source", BackReferenceName="AddressesSources")]
		public Customer Customer { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="CustomerAttribute")]
	public partial class CustomerAttribute
	{
		[PrimaryKey, Identity] public int    Id                     { get; set; } // int
		[Column,     NotNull ] public string Name                   { get; set; } // nvarchar(400)
		[Column,     NotNull ] public bool   IsRequired             { get; set; } // bit
		[Column,     NotNull ] public int    AttributeControlTypeId { get; set; } // int
		[Column,     NotNull ] public int    DisplayOrder           { get; set; } // int

		#region Associations

		/// <summary>
		/// CustomerAttributeValue_CustomerAttribute_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerAttributeId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<CustomerAttributeValue> CustomerAttributeValues { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="CustomerAttributeValue")]
	public partial class CustomerAttributeValue
	{
		[PrimaryKey, Identity] public int    Id                  { get; set; } // int
		[Column,     NotNull ] public int    CustomerAttributeId { get; set; } // int
		[Column,     NotNull ] public string Name                { get; set; } // nvarchar(400)
		[Column,     NotNull ] public bool   IsPreSelected       { get; set; } // bit
		[Column,     NotNull ] public int    DisplayOrder        { get; set; } // int

		#region Associations

		/// <summary>
		/// CustomerAttributeValue_CustomerAttribute
		/// </summary>
		[Association(ThisKey="CustomerAttributeId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="CustomerAttributeValue_CustomerAttribute", BackReferenceName="CustomerAttributeValues")]
		public CustomerAttribute CustomerAttribute { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Customer_CustomerRole_Mapping")]
	public partial class CustomerCustomerRoleMapping
	{
		[Column("Customer_Id"),     PrimaryKey(1), NotNull] public int CustomerId     { get; set; } // int
		[Column("CustomerRole_Id"), PrimaryKey(2), NotNull] public int CustomerRoleId { get; set; } // int

		#region Associations

		/// <summary>
		/// Customer_CustomerRoles_Source
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Customer_CustomerRoles_Source", BackReferenceName="CustomerRolesSources")]
		public Customer Customer { get; set; }

		/// <summary>
		/// Customer_CustomerRoles_Target
		/// </summary>
		[Association(ThisKey="CustomerRoleId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Customer_CustomerRoles_Target", BackReferenceName="CustomerCustomerRolesTargets")]
		public CustomerRole CustomerRole { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="CustomerPassword")]
	public partial class CustomerPassword
	{
		[PrimaryKey, Identity   ] public int      Id               { get; set; } // int
		[Column,     NotNull    ] public int      CustomerId       { get; set; } // int
		[Column,        Nullable] public string   Password         { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int      PasswordFormatId { get; set; } // int
		[Column,        Nullable] public string   PasswordSalt     { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public DateTime CreatedOnUtc     { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// CustomerPassword_Customer
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="CustomerPassword_Customer", BackReferenceName="CustomerPasswords")]
		public Customer Customer { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="CustomerRole")]
	public partial class CustomerRole
	{
		[PrimaryKey, Identity   ] public int    Id                      { get; set; } // int
		[Column,     NotNull    ] public string Name                    { get; set; } // nvarchar(255)
		[Column,     NotNull    ] public bool   FreeShipping            { get; set; } // bit
		[Column,     NotNull    ] public bool   TaxExempt               { get; set; } // bit
		[Column,     NotNull    ] public bool   Active                  { get; set; } // bit
		[Column,     NotNull    ] public bool   IsSystemRole            { get; set; } // bit
		[Column,        Nullable] public string SystemName              { get; set; } // nvarchar(255)
		[Column,     NotNull    ] public bool   EnablePasswordLifetime  { get; set; } // bit
		[Column,     NotNull    ] public int    PurchasedWithProductId  { get; set; } // int
		[Column,     NotNull    ] public bool   OverrideTaxDisplayType  { get; set; } // bit
		[Column,     NotNull    ] public int    DefaultTaxDisplayTypeId { get; set; } // int
		[Column,     NotNull    ] public bool   IsStayfunCompany        { get; set; } // bit

		#region Associations

		/// <summary>
		/// AclRecord_CustomerRole_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerRoleId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<AclRecord> AclRecords { get; set; }

		/// <summary>
		/// Customer_CustomerRoles_Target_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerRoleId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<CustomerCustomerRoleMapping> CustomerCustomerRolesTargets { get; set; }

		/// <summary>
		/// PermissionRecord_CustomerRoles_Target_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerRoleId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<PermissionRecordRoleMapping> PermissionRecordCustomerRolesTargets { get; set; }

		/// <summary>
		/// TierPrice_CustomerRole_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerRoleId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<TierPrice> TierPrices { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="DeliveryDate")]
	public partial class DeliveryDate
	{
		[PrimaryKey, Identity] public int    Id           { get; set; } // int
		[Column,     NotNull ] public string Name         { get; set; } // nvarchar(400)
		[Column,     NotNull ] public int    DisplayOrder { get; set; } // int
	}

	[Table(Schema="dbo", Name="Discount")]
	public partial class Discount
	{
		[PrimaryKey, Identity   ] public int       Id                        { get; set; } // int
		[Column,     NotNull    ] public string    Name                      { get; set; } // nvarchar(200)
		[Column,     NotNull    ] public int       DiscountTypeId            { get; set; } // int
		[Column,     NotNull    ] public bool      UsePercentage             { get; set; } // bit
		[Column,     NotNull    ] public decimal   DiscountPercentage        { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   DiscountAmount            { get; set; } // decimal(18, 4)
		[Column,        Nullable] public decimal?  MaximumDiscountAmount     { get; set; } // decimal(18, 4)
		[Column,        Nullable] public DateTime? StartDateUtc              { get; set; } // datetime2(7)
		[Column,        Nullable] public DateTime? EndDateUtc                { get; set; } // datetime2(7)
		[Column,     NotNull    ] public bool      RequiresCouponCode        { get; set; } // bit
		[Column,        Nullable] public string    CouponCode                { get; set; } // nvarchar(100)
		[Column,     NotNull    ] public bool      IsCumulative              { get; set; } // bit
		[Column,     NotNull    ] public int       DiscountLimitationId      { get; set; } // int
		[Column,     NotNull    ] public int       LimitationTimes           { get; set; } // int
		[Column,        Nullable] public int?      MaximumDiscountedQuantity { get; set; } // int
		[Column,     NotNull    ] public bool      AppliedToSubCategories    { get; set; } // bit
		[Column,        Nullable] public string    AdminComment              { get; set; } // nvarchar(max)

		#region Associations

		/// <summary>
		/// Discount_AppliedToCategories_Source_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="DiscountId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<DiscountAppliedToCategory> AppliedToCategoriesSources { get; set; }

		/// <summary>
		/// Discount_AppliedToManufacturers_Source_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="DiscountId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<DiscountAppliedToManufacturer> AppliedToManufacturersSources { get; set; }

		/// <summary>
		/// Discount_AppliedToProducts_Source_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="DiscountId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<DiscountAppliedToProduct> AppliedToProductsSources { get; set; }

		/// <summary>
		/// Discount_DiscountRequirements_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="DiscountId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<DiscountRequirement> DiscountRequirements { get; set; }

		/// <summary>
		/// DiscountUsageHistory_Discount_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="DiscountId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<DiscountUsageHistory> DiscountUsageHistories { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Discount_AppliedToCategories")]
	public partial class DiscountAppliedToCategory
	{
		[Column("Discount_Id"), PrimaryKey(1), NotNull] public int DiscountId { get; set; } // int
		[Column("Category_Id"), PrimaryKey(2), NotNull] public int CategoryId { get; set; } // int

		#region Associations

		/// <summary>
		/// Discount_AppliedToCategories_Target
		/// </summary>
		[Association(ThisKey="CategoryId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Discount_AppliedToCategories_Target", BackReferenceName="DiscountAppliedToCategoriesTargets")]
		public Category Category { get; set; }

		/// <summary>
		/// Discount_AppliedToCategories_Source
		/// </summary>
		[Association(ThisKey="DiscountId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Discount_AppliedToCategories_Source", BackReferenceName="AppliedToCategoriesSources")]
		public Discount Discount { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Discount_AppliedToManufacturers")]
	public partial class DiscountAppliedToManufacturer
	{
		[Column("Discount_Id"),     PrimaryKey(1), NotNull] public int DiscountId     { get; set; } // int
		[Column("Manufacturer_Id"), PrimaryKey(2), NotNull] public int ManufacturerId { get; set; } // int

		#region Associations

		/// <summary>
		/// Discount_AppliedToManufacturers_Source
		/// </summary>
		[Association(ThisKey="DiscountId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Discount_AppliedToManufacturers_Source", BackReferenceName="AppliedToManufacturersSources")]
		public Discount Discount { get; set; }

		/// <summary>
		/// Discount_AppliedToManufacturers_Target
		/// </summary>
		[Association(ThisKey="ManufacturerId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Discount_AppliedToManufacturers_Target", BackReferenceName="DiscountAppliedToManufacturersTargets")]
		public Manufacturer Manufacturer { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Discount_AppliedToProducts")]
	public partial class DiscountAppliedToProduct
	{
		[Column("Discount_Id"), PrimaryKey(1), NotNull] public int DiscountId { get; set; } // int
		[Column("Product_Id"),  PrimaryKey(2), NotNull] public int ProductId  { get; set; } // int

		#region Associations

		/// <summary>
		/// Discount_AppliedToProducts_Source
		/// </summary>
		[Association(ThisKey="DiscountId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Discount_AppliedToProducts_Source", BackReferenceName="AppliedToProductsSources")]
		public Discount Discount { get; set; }

		/// <summary>
		/// Discount_AppliedToProducts_Target
		/// </summary>
		[Association(ThisKey="ProductId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Discount_AppliedToProducts_Target", BackReferenceName="DiscountAppliedToProductsTargets")]
		public Product Product { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="DiscountRequirement")]
	public partial class DiscountRequirement
	{
		[PrimaryKey, Identity   ] public int    Id                                { get; set; } // int
		[Column,     NotNull    ] public int    DiscountId                        { get; set; } // int
		[Column,        Nullable] public string DiscountRequirementRuleSystemName { get; set; } // nvarchar(max)
		[Column,        Nullable] public int?   ParentId                          { get; set; } // int
		[Column,        Nullable] public int?   InteractionTypeId                 { get; set; } // int
		[Column,     NotNull    ] public bool   IsGroup                           { get; set; } // bit

		#region Associations

		/// <summary>
		/// DiscountRequirement_ChildRequirements_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ParentId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<DiscountRequirement> ChildRequirements { get; set; }

		/// <summary>
		/// Discount_DiscountRequirements
		/// </summary>
		[Association(ThisKey="DiscountId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Discount_DiscountRequirements", BackReferenceName="DiscountRequirements")]
		public Discount Discount { get; set; }

		/// <summary>
		/// DiscountRequirement_ChildRequirements
		/// </summary>
		[Association(ThisKey="ParentId", OtherKey="Id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="DiscountRequirement_ChildRequirements", BackReferenceName="ChildRequirements")]
		public DiscountRequirement Parent { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="DiscountUsageHistory")]
	public partial class DiscountUsageHistory
	{
		[PrimaryKey, Identity] public int      Id           { get; set; } // int
		[Column,     NotNull ] public int      DiscountId   { get; set; } // int
		[Column,     NotNull ] public int      OrderId      { get; set; } // int
		[Column,     NotNull ] public DateTime CreatedOnUtc { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// DiscountUsageHistory_Discount
		/// </summary>
		[Association(ThisKey="DiscountId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="DiscountUsageHistory_Discount", BackReferenceName="DiscountUsageHistories")]
		public Discount Discount { get; set; }

		/// <summary>
		/// DiscountUsageHistory_Order
		/// </summary>
		[Association(ThisKey="OrderId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="DiscountUsageHistory_Order", BackReferenceName="DiscountUsageHistories")]
		public Order Order { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Download")]
	public partial class Download
	{
		[PrimaryKey, Identity   ] public int    Id             { get; set; } // int
		[Column,     NotNull    ] public Guid   DownloadGuid   { get; set; } // uniqueidentifier
		[Column,     NotNull    ] public bool   UseDownloadUrl { get; set; } // bit
		[Column,        Nullable] public string DownloadUrl    { get; set; } // nvarchar(max)
		[Column,        Nullable] public byte[] DownloadBinary { get; set; } // varbinary(max)
		[Column,        Nullable] public string ContentType    { get; set; } // nvarchar(max)
		[Column,        Nullable] public string Filename       { get; set; } // nvarchar(max)
		[Column,        Nullable] public string Extension      { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool   IsNew          { get; set; } // bit
	}

	[Table(Schema="dbo", Name="EmailAccount")]
	public partial class EmailAccount
	{
		[PrimaryKey, Identity   ] public int    Id                    { get; set; } // int
		[Column,     NotNull    ] public string Email                 { get; set; } // nvarchar(255)
		[Column,        Nullable] public string DisplayName           { get; set; } // nvarchar(255)
		[Column,     NotNull    ] public string Host                  { get; set; } // nvarchar(255)
		[Column,     NotNull    ] public int    Port                  { get; set; } // int
		[Column,     NotNull    ] public string Username              { get; set; } // nvarchar(255)
		[Column,     NotNull    ] public string Password              { get; set; } // nvarchar(255)
		[Column,     NotNull    ] public bool   EnableSsl             { get; set; } // bit
		[Column,     NotNull    ] public bool   UseDefaultCredentials { get; set; } // bit

		#region Associations

		/// <summary>
		/// QueuedEmail_EmailAccount_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="EmailAccountId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<QueuedEmail> QueuedEmails { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="ExternalAuthenticationRecord")]
	public partial class ExternalAuthenticationRecord
	{
		[PrimaryKey, Identity   ] public int    Id                        { get; set; } // int
		[Column,     NotNull    ] public int    CustomerId                { get; set; } // int
		[Column,        Nullable] public string Email                     { get; set; } // nvarchar(max)
		[Column,        Nullable] public string ExternalIdentifier        { get; set; } // nvarchar(max)
		[Column,        Nullable] public string ExternalDisplayIdentifier { get; set; } // nvarchar(max)
		[Column,        Nullable] public string OAuthToken                { get; set; } // nvarchar(max)
		[Column,        Nullable] public string OAuthAccessToken          { get; set; } // nvarchar(max)
		[Column,        Nullable] public string ProviderSystemName        { get; set; } // nvarchar(max)

		#region Associations

		/// <summary>
		/// ExternalAuthenticationRecord_Customer
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ExternalAuthenticationRecord_Customer", BackReferenceName="ExternalAuthenticationRecords")]
		public Customer Customer { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Forums_Forum")]
	public partial class ForumsForum
	{
		[PrimaryKey, Identity   ] public int       Id                 { get; set; } // int
		[Column,     NotNull    ] public int       ForumGroupId       { get; set; } // int
		[Column,     NotNull    ] public string    Name               { get; set; } // nvarchar(200)
		[Column,        Nullable] public string    Description        { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int       NumTopics          { get; set; } // int
		[Column,     NotNull    ] public int       NumPosts           { get; set; } // int
		[Column,     NotNull    ] public int       LastTopicId        { get; set; } // int
		[Column,     NotNull    ] public int       LastPostId         { get; set; } // int
		[Column,     NotNull    ] public int       LastPostCustomerId { get; set; } // int
		[Column,        Nullable] public DateTime? LastPostTime       { get; set; } // datetime2(7)
		[Column,     NotNull    ] public int       DisplayOrder       { get; set; } // int
		[Column,     NotNull    ] public DateTime  CreatedOnUtc       { get; set; } // datetime2(7)
		[Column,     NotNull    ] public DateTime  UpdatedOnUtc       { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// Forum_ForumGroup
		/// </summary>
		[Association(ThisKey="ForumGroupId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Forum_ForumGroup", BackReferenceName="ForumForumGroups")]
		public ForumsGroup ForumGroup { get; set; }

		/// <summary>
		/// ForumTopic_Forum_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ForumId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ForumsTopic> ForumTopicFora { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Forums_Group")]
	public partial class ForumsGroup
	{
		[PrimaryKey, Identity] public int      Id           { get; set; } // int
		[Column,     NotNull ] public string   Name         { get; set; } // nvarchar(200)
		[Column,     NotNull ] public int      DisplayOrder { get; set; } // int
		[Column,     NotNull ] public DateTime CreatedOnUtc { get; set; } // datetime2(7)
		[Column,     NotNull ] public DateTime UpdatedOnUtc { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// Forum_ForumGroup_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ForumGroupId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ForumsForum> ForumForumGroups { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Forums_Post")]
	public partial class ForumsPost
	{
		[PrimaryKey, Identity   ] public int      Id           { get; set; } // int
		[Column,     NotNull    ] public int      TopicId      { get; set; } // int
		[Column,     NotNull    ] public int      CustomerId   { get; set; } // int
		[Column,     NotNull    ] public string   Text         { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   IPAddress    { get; set; } // nvarchar(100)
		[Column,     NotNull    ] public DateTime CreatedOnUtc { get; set; } // datetime2(7)
		[Column,     NotNull    ] public DateTime UpdatedOnUtc { get; set; } // datetime2(7)
		[Column,     NotNull    ] public int      VoteCount    { get; set; } // int

		#region Associations

		/// <summary>
		/// ForumPost_Customer
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ForumPost_Customer", BackReferenceName="ForumPosts")]
		public Customer Customer { get; set; }

		/// <summary>
		/// ForumPostVote_ForumPost_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ForumPostId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ForumsPostVote> ForumPostVoteForumPosts { get; set; }

		/// <summary>
		/// ForumPost_ForumTopic
		/// </summary>
		[Association(ThisKey="TopicId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ForumPost_ForumTopic", BackReferenceName="ForumPostForumTopics")]
		public ForumsTopic Topic { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Forums_PostVote")]
	public partial class ForumsPostVote
	{
		[PrimaryKey, Identity] public int      Id           { get; set; } // int
		[Column,     NotNull ] public int      ForumPostId  { get; set; } // int
		[Column,     NotNull ] public int      CustomerId   { get; set; } // int
		[Column,     NotNull ] public bool     IsUp         { get; set; } // bit
		[Column,     NotNull ] public DateTime CreatedOnUtc { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// ForumPostVote_ForumPost
		/// </summary>
		[Association(ThisKey="ForumPostId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ForumPostVote_ForumPost", BackReferenceName="ForumPostVoteForumPosts")]
		public ForumsPost ForumPost { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Forums_PrivateMessage")]
	public partial class ForumsPrivateMessage
	{
		[PrimaryKey, Identity] public int      Id                   { get; set; } // int
		[Column,     NotNull ] public int      StoreId              { get; set; } // int
		[Column,     NotNull ] public int      FromCustomerId       { get; set; } // int
		[Column,     NotNull ] public int      ToCustomerId         { get; set; } // int
		[Column,     NotNull ] public string   Subject              { get; set; } // nvarchar(450)
		[Column,     NotNull ] public string   Text                 { get; set; } // nvarchar(max)
		[Column,     NotNull ] public bool     IsRead               { get; set; } // bit
		[Column,     NotNull ] public bool     IsDeletedByAuthor    { get; set; } // bit
		[Column,     NotNull ] public bool     IsDeletedByRecipient { get; set; } // bit
		[Column,     NotNull ] public DateTime CreatedOnUtc         { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// PrivateMessage_FromCustomer
		/// </summary>
		[Association(ThisKey="FromCustomerId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="PrivateMessage_FromCustomer", BackReferenceName="PrivateMessageFromCustomers")]
		public Customer FromCustomer { get; set; }

		/// <summary>
		/// PrivateMessage_ToCustomer
		/// </summary>
		[Association(ThisKey="ToCustomerId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="PrivateMessage_ToCustomer", BackReferenceName="PrivateMessageToCustomers")]
		public Customer ToCustomer { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Forums_Subscription")]
	public partial class ForumsSubscription
	{
		[PrimaryKey, Identity] public int      Id               { get; set; } // int
		[Column,     NotNull ] public Guid     SubscriptionGuid { get; set; } // uniqueidentifier
		[Column,     NotNull ] public int      CustomerId       { get; set; } // int
		[Column,     NotNull ] public int      ForumId          { get; set; } // int
		[Column,     NotNull ] public int      TopicId          { get; set; } // int
		[Column,     NotNull ] public DateTime CreatedOnUtc     { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// ForumSubscription_Customer
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ForumSubscription_Customer", BackReferenceName="ForumSubscriptions")]
		public Customer Customer { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Forums_Topic")]
	public partial class ForumsTopic
	{
		[PrimaryKey, Identity   ] public int       Id                 { get; set; } // int
		[Column,     NotNull    ] public int       ForumId            { get; set; } // int
		[Column,     NotNull    ] public int       CustomerId         { get; set; } // int
		[Column,     NotNull    ] public int       TopicTypeId        { get; set; } // int
		[Column,     NotNull    ] public string    Subject            { get; set; } // nvarchar(450)
		[Column,     NotNull    ] public int       NumPosts           { get; set; } // int
		[Column,     NotNull    ] public int       Views              { get; set; } // int
		[Column,     NotNull    ] public int       LastPostId         { get; set; } // int
		[Column,     NotNull    ] public int       LastPostCustomerId { get; set; } // int
		[Column,        Nullable] public DateTime? LastPostTime       { get; set; } // datetime2(7)
		[Column,     NotNull    ] public DateTime  CreatedOnUtc       { get; set; } // datetime2(7)
		[Column,     NotNull    ] public DateTime  UpdatedOnUtc       { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// ForumTopic_Customer
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ForumTopic_Customer", BackReferenceName="ForumTopics")]
		public Customer Customer { get; set; }

		/// <summary>
		/// ForumTopic_Forum
		/// </summary>
		[Association(ThisKey="ForumId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ForumTopic_Forum", BackReferenceName="ForumTopicFora")]
		public ForumsForum Forum { get; set; }

		/// <summary>
		/// ForumPost_ForumTopic_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="TopicId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ForumsPost> ForumPostForumTopics { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="GdprConsent")]
	public partial class GdprConsent
	{
		[PrimaryKey, Identity   ] public int    Id                        { get; set; } // int
		[Column,     NotNull    ] public string Message                   { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool   IsRequired                { get; set; } // bit
		[Column,        Nullable] public string RequiredMessage           { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool   DisplayDuringRegistration { get; set; } // bit
		[Column,     NotNull    ] public bool   DisplayOnCustomerInfoPage { get; set; } // bit
		[Column,     NotNull    ] public int    DisplayOrder              { get; set; } // int
	}

	[Table(Schema="dbo", Name="GdprLog")]
	public partial class GdprLog
	{
		[PrimaryKey, Identity] public int      Id             { get; set; } // int
		[Column,     NotNull ] public int      CustomerId     { get; set; } // int
		[Column,     NotNull ] public int      ConsentId      { get; set; } // int
		[Column,     NotNull ] public string   CustomerInfo   { get; set; } // nvarchar(max)
		[Column,     NotNull ] public int      RequestTypeId  { get; set; } // int
		[Column,     NotNull ] public string   RequestDetails { get; set; } // nvarchar(max)
		[Column,     NotNull ] public DateTime CreatedOnUtc   { get; set; } // datetime2(7)
	}

	[Table(Schema="dbo", Name="GenericAttribute")]
	public partial class GenericAttribute
	{
		[PrimaryKey, Identity   ] public int       Id                      { get; set; } // int
		[Column,     NotNull    ] public int       EntityId                { get; set; } // int
		[Column,     NotNull    ] public string    KeyGroup                { get; set; } // nvarchar(400)
		[Column,     NotNull    ] public string    Key                     { get; set; } // nvarchar(400)
		[Column,     NotNull    ] public string    Value                   { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int       StoreId                 { get; set; } // int
		[Column,        Nullable] public DateTime? CreatedOrUpdatedDateUTC { get; set; } // datetime
	}

	[Table(Schema="dbo", Name="GiftCard")]
	public partial class GiftCard
	{
		[PrimaryKey, Identity   ] public int      Id                       { get; set; } // int
		[Column,        Nullable] public int?     PurchasedWithOrderItemId { get; set; } // int
		[Column,     NotNull    ] public int      GiftCardTypeId           { get; set; } // int
		[Column,     NotNull    ] public decimal  Amount                   { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public bool     IsGiftCardActivated      { get; set; } // bit
		[Column,        Nullable] public string   GiftCardCouponCode       { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   RecipientName            { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   RecipientEmail           { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   SenderName               { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   SenderEmail              { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   Message                  { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool     IsRecipientNotified      { get; set; } // bit
		[Column,     NotNull    ] public DateTime CreatedOnUtc             { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// GiftCardUsageHistory_GiftCard_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="GiftCardId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<GiftCardUsageHistory> GiftCardUsageHistories { get; set; }

		/// <summary>
		/// GiftCard_PurchasedWithOrderItem
		/// </summary>
		[Association(ThisKey="PurchasedWithOrderItemId", OtherKey="Id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="GiftCard_PurchasedWithOrderItem", BackReferenceName="GiftCardPurchasedWithOrderItems")]
		public OrderItem PurchasedWithOrderItem { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="GiftCardUsageHistory")]
	public partial class GiftCardUsageHistory
	{
		[PrimaryKey, Identity] public int      Id              { get; set; } // int
		[Column,     NotNull ] public int      GiftCardId      { get; set; } // int
		[Column,     NotNull ] public int      UsedWithOrderId { get; set; } // int
		[Column,     NotNull ] public decimal  UsedValue       { get; set; } // decimal(18, 4)
		[Column,     NotNull ] public DateTime CreatedOnUtc    { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// GiftCardUsageHistory_GiftCard
		/// </summary>
		[Association(ThisKey="GiftCardId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="GiftCardUsageHistory_GiftCard", BackReferenceName="GiftCardUsageHistories")]
		public GiftCard GiftCard { get; set; }

		/// <summary>
		/// GiftCardUsageHistory_UsedWithOrder
		/// </summary>
		[Association(ThisKey="UsedWithOrderId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="GiftCardUsageHistory_UsedWithOrder", BackReferenceName="GiftCardUsageHistoryUsedWithOrders")]
		public Order UsedWithOrder { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="HeaderBanners")]
	public partial class HeaderBanner
	{
		[PrimaryKey, Identity   ] public int    Id             { get; set; } // int
		[Column,        Nullable] public string PageSystemName { get; set; } // nvarchar(max)
		[Column,        Nullable] public string ImageExt       { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool   IsUseTheme     { get; set; } // bit
		[Column,     NotNull    ] public int    StoreId        { get; set; } // int
		[Column,        Nullable] public string WidgetZone     { get; set; } // nvarchar(max)
		[Column,        Nullable] public string HtmlContent    { get; set; } // nvarchar(max)
	}

	/// <summary>
	/// ?????????
	/// </summary>
	[Table(Schema="dbo", Name="JoinClubOrder")]
	public partial class JoinClubOrder
	{
		/// <summary>
		/// ???
		/// </summary>
		[PrimaryKey, Identity] public int    Id                        { get; set; } // int
		/// <summary>
		/// ????
		/// </summary>
		[Column,     NotNull ] public int    OrderId                   { get; set; } // int
		/// <summary>
		/// ????
		/// </summary>
		[Column,     NotNull ] public string CustomOrderNumber         { get; set; } // varchar(30)
		/// <summary>
		/// ?????
		/// </summary>
		[Column,     NotNull ] public bool   IsMaster                  { get; set; } // bit
		/// <summary>
		/// ?????
		/// </summary>
		[Column,     NotNull ] public string PurchaseName              { get; set; } // nvarchar(50)
		/// <summary>
		/// ???Email
		/// </summary>
		[Column,     NotNull ] public string PurchaseEmail             { get; set; } // nvarchar(200)
		/// <summary>
		/// ????
		/// </summary>
		[Column,     NotNull ] public long   JoinClubGroupBuyingId     { get; set; } // bigint
		[Column,     NotNull ] public string JoinClubGroupBuyingName   { get; set; } // nchar(50)
		/// <summary>
		/// ????
		/// </summary>
		[Column,     NotNull ] public string JoinClubGroupBuyingStatus { get; set; } // varchar(30)
		[Column,     NotNull ] public int    ProductId                 { get; set; } // int
		/// <summary>
		/// ????
		/// </summary>
		[Column,     NotNull ] public string ShippingMethod            { get; set; } // varchar(20)
		/// <summary>
		/// ??
		/// </summary>
		[Column,     NotNull ] public int    Threshold                 { get; set; } // int
		/// <summary>
		/// ????
		/// </summary>
		[Column,     NotNull ] public string JoinType                  { get; set; } // varchar(20)
		/// <summary>
		/// ?????
		/// </summary>
		[Column,     NotNull ] public bool   IsTransfer                { get; set; } // bit
		/// <summary>
		/// ????
		/// </summary>
		[Column,     NotNull ] public bool   IsLimited                 { get; set; } // bit
	}

	[Table(Schema="dbo", Name="Language")]
	public partial class Language
	{
		[PrimaryKey, Identity   ] public int    Id                { get; set; } // int
		[Column,     NotNull    ] public string Name              { get; set; } // nvarchar(100)
		[Column,     NotNull    ] public string LanguageCulture   { get; set; } // nvarchar(20)
		[Column,        Nullable] public string UniqueSeoCode     { get; set; } // nvarchar(2)
		[Column,        Nullable] public string FlagImageFileName { get; set; } // nvarchar(50)
		[Column,     NotNull    ] public bool   Rtl               { get; set; } // bit
		[Column,     NotNull    ] public bool   LimitedToStores   { get; set; } // bit
		[Column,     NotNull    ] public int    DefaultCurrencyId { get; set; } // int
		[Column,     NotNull    ] public bool   Published         { get; set; } // bit
		[Column,     NotNull    ] public int    DisplayOrder      { get; set; } // int

		#region Associations

		/// <summary>
		/// BlogPost_Language_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="LanguageId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<BlogPost> BlogPosts { get; set; }

		/// <summary>
		/// LocaleStringResource_Language_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="LanguageId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<LocaleStringResource> LocaleStringResources { get; set; }

		/// <summary>
		/// LocalizedProperty_Language_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="LanguageId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<LocalizedProperty> LocalizedProperties { get; set; }

		/// <summary>
		/// NewsItem_Language_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="LanguageId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<News> NewsItems { get; set; }

		/// <summary>
		/// Poll_Language_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="LanguageId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Poll> Polls { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="LocaleStringResource")]
	public partial class LocaleStringResource
	{
		[PrimaryKey, Identity] public int    Id            { get; set; } // int
		[Column,     NotNull ] public int    LanguageId    { get; set; } // int
		[Column,     NotNull ] public string ResourceName  { get; set; } // nvarchar(200)
		[Column,     NotNull ] public string ResourceValue { get; set; } // nvarchar(max)

		#region Associations

		/// <summary>
		/// LocaleStringResource_Language
		/// </summary>
		[Association(ThisKey="LanguageId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="LocaleStringResource_Language", BackReferenceName="LocaleStringResources")]
		public Language Language { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="LocalizedProperty")]
	public partial class LocalizedProperty
	{
		[PrimaryKey, Identity] public int    Id             { get; set; } // int
		[Column,     NotNull ] public int    EntityId       { get; set; } // int
		[Column,     NotNull ] public int    LanguageId     { get; set; } // int
		[Column,     NotNull ] public string LocaleKeyGroup { get; set; } // nvarchar(400)
		[Column,     NotNull ] public string LocaleKey      { get; set; } // nvarchar(400)
		[Column,     NotNull ] public string LocaleValue    { get; set; } // nvarchar(max)

		#region Associations

		/// <summary>
		/// LocalizedProperty_Language
		/// </summary>
		[Association(ThisKey="LanguageId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="LocalizedProperty_Language", BackReferenceName="LocalizedProperties")]
		public Language Language { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Log")]
	public partial class Log
	{
		[PrimaryKey, Identity   ] public int      Id           { get; set; } // int
		[Column,     NotNull    ] public int      LogLevelId   { get; set; } // int
		[Column,     NotNull    ] public string   ShortMessage { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   FullMessage  { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   IpAddress    { get; set; } // nvarchar(200)
		[Column,        Nullable] public int?     CustomerId   { get; set; } // int
		[Column,        Nullable] public string   PageUrl      { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   ReferrerUrl  { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public DateTime CreatedOnUtc { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// Log_Customer
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="Id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="Log_Customer", BackReferenceName="Logs")]
		public Customer Customer { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Manufacturer")]
	public partial class Manufacturer
	{
		[PrimaryKey, Identity   ] public int      Id                             { get; set; } // int
		[Column,     NotNull    ] public string   Name                           { get; set; } // nvarchar(400)
		[Column,        Nullable] public string   Description                    { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int      ManufacturerTemplateId         { get; set; } // int
		[Column,        Nullable] public string   MetaKeywords                   { get; set; } // nvarchar(400)
		[Column,        Nullable] public string   MetaDescription                { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   MetaTitle                      { get; set; } // nvarchar(400)
		[Column,     NotNull    ] public int      PictureId                      { get; set; } // int
		[Column,     NotNull    ] public int      PageSize                       { get; set; } // int
		[Column,     NotNull    ] public bool     AllowCustomersToSelectPageSize { get; set; } // bit
		[Column,        Nullable] public string   PageSizeOptions                { get; set; } // nvarchar(200)
		[Column,        Nullable] public string   PriceRanges                    { get; set; } // nvarchar(400)
		[Column,     NotNull    ] public bool     SubjectToAcl                   { get; set; } // bit
		[Column,     NotNull    ] public bool     LimitedToStores                { get; set; } // bit
		[Column,     NotNull    ] public bool     Published                      { get; set; } // bit
		[Column,     NotNull    ] public bool     Deleted                        { get; set; } // bit
		[Column,     NotNull    ] public int      DisplayOrder                   { get; set; } // int
		[Column,     NotNull    ] public DateTime CreatedOnUtc                   { get; set; } // datetime2(7)
		[Column,     NotNull    ] public DateTime UpdatedOnUtc                   { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// Discount_AppliedToManufacturers_Target_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ManufacturerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<DiscountAppliedToManufacturer> DiscountAppliedToManufacturersTargets { get; set; }

		/// <summary>
		/// ProductManufacturer_Manufacturer_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ManufacturerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProductManufacturerMapping> ProductManufacturers { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="ManufacturerTemplate")]
	public partial class ManufacturerTemplate
	{
		[PrimaryKey, Identity] public int    Id           { get; set; } // int
		[Column,     NotNull ] public string Name         { get; set; } // nvarchar(400)
		[Column,     NotNull ] public string ViewPath     { get; set; } // nvarchar(400)
		[Column,     NotNull ] public int    DisplayOrder { get; set; } // int
	}

	[Table(Schema="dbo", Name="MeasureDimension")]
	public partial class MeasureDimension
	{
		[PrimaryKey, Identity] public int     Id            { get; set; } // int
		[Column,     NotNull ] public string  Name          { get; set; } // nvarchar(100)
		[Column,     NotNull ] public string  SystemKeyword { get; set; } // nvarchar(100)
		[Column,     NotNull ] public decimal Ratio         { get; set; } // decimal(18, 8)
		[Column,     NotNull ] public int     DisplayOrder  { get; set; } // int
	}

	[Table(Schema="dbo", Name="MeasureWeight")]
	public partial class MeasureWeight
	{
		[PrimaryKey, Identity] public int     Id            { get; set; } // int
		[Column,     NotNull ] public string  Name          { get; set; } // nvarchar(100)
		[Column,     NotNull ] public string  SystemKeyword { get; set; } // nvarchar(100)
		[Column,     NotNull ] public decimal Ratio         { get; set; } // decimal(18, 8)
		[Column,     NotNull ] public int     DisplayOrder  { get; set; } // int
	}

	[Table(Schema="dbo", Name="MessageTemplate")]
	public partial class MessageTemplate
	{
		[PrimaryKey, Identity   ] public int    Id                 { get; set; } // int
		[Column,     NotNull    ] public string Name               { get; set; } // nvarchar(200)
		[Column,        Nullable] public string BccEmailAddresses  { get; set; } // nvarchar(200)
		[Column,        Nullable] public string Subject            { get; set; } // nvarchar(1000)
		[Column,        Nullable] public string Body               { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool   IsActive           { get; set; } // bit
		[Column,        Nullable] public int?   DelayBeforeSend    { get; set; } // int
		[Column,     NotNull    ] public int    DelayPeriodId      { get; set; } // int
		[Column,     NotNull    ] public int    AttachedDownloadId { get; set; } // int
		[Column,     NotNull    ] public int    EmailAccountId     { get; set; } // int
		[Column,     NotNull    ] public bool   LimitedToStores    { get; set; } // bit
	}

	[Table(Schema="dbo", Name="MigrationVersionInfo")]
	public partial class MigrationVersionInfo
	{
		[Column,    Nullable] public DateTime? AppliedOn   { get; set; } // datetime
		[Column,    Nullable] public string    Description { get; set; } // nvarchar(1024)
		[Column, NotNull    ] public long      Version     { get; set; } // bigint
	}

	[Table(Schema="dbo", Name="News")]
	public partial class News
	{
		[PrimaryKey, Identity   ] public int       Id              { get; set; } // int
		[Column,     NotNull    ] public int       LanguageId      { get; set; } // int
		[Column,     NotNull    ] public string    Title           { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public string    Short           { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public string    Full            { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool      Published       { get; set; } // bit
		[Column,        Nullable] public DateTime? StartDateUtc    { get; set; } // datetime2(7)
		[Column,        Nullable] public DateTime? EndDateUtc      { get; set; } // datetime2(7)
		[Column,     NotNull    ] public bool      AllowComments   { get; set; } // bit
		[Column,     NotNull    ] public bool      LimitedToStores { get; set; } // bit
		[Column,        Nullable] public string    MetaKeywords    { get; set; } // nvarchar(400)
		[Column,        Nullable] public string    MetaDescription { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    MetaTitle       { get; set; } // nvarchar(400)
		[Column,     NotNull    ] public DateTime  CreatedOnUtc    { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// NewsItem_Language
		/// </summary>
		[Association(ThisKey="LanguageId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="NewsItem_Language", BackReferenceName="NewsItems")]
		public Language Language { get; set; }

		/// <summary>
		/// NewsComment_NewsItem_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="NewsItemId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<NewsComment> NewsCommentNewsItems { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="NewsComment")]
	public partial class NewsComment
	{
		[PrimaryKey, Identity   ] public int      Id           { get; set; } // int
		[Column,        Nullable] public string   CommentTitle { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   CommentText  { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int      NewsItemId   { get; set; } // int
		[Column,     NotNull    ] public int      CustomerId   { get; set; } // int
		[Column,     NotNull    ] public bool     IsApproved   { get; set; } // bit
		[Column,     NotNull    ] public int      StoreId      { get; set; } // int
		[Column,     NotNull    ] public DateTime CreatedOnUtc { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// NewsComment_Customer
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="NewsComment_Customer", BackReferenceName="NewsComments")]
		public Customer Customer { get; set; }

		/// <summary>
		/// NewsComment_NewsItem
		/// </summary>
		[Association(ThisKey="NewsItemId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="NewsComment_NewsItem", BackReferenceName="NewsCommentNewsItems")]
		public News NewsItem { get; set; }

		/// <summary>
		/// NewsComment_Store
		/// </summary>
		[Association(ThisKey="StoreId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="NewsComment_Store", BackReferenceName="NewsComments")]
		public Store Store { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="NewsLetterSubscription")]
	public partial class NewsLetterSubscription
	{
		[PrimaryKey, Identity] public int      Id                         { get; set; } // int
		[Column,     NotNull ] public Guid     NewsLetterSubscriptionGuid { get; set; } // uniqueidentifier
		[Column,     NotNull ] public string   Email                      { get; set; } // nvarchar(255)
		[Column,     NotNull ] public bool     Active                     { get; set; } // bit
		[Column,     NotNull ] public int      StoreId                    { get; set; } // int
		[Column,     NotNull ] public DateTime CreatedOnUtc               { get; set; } // datetime2(7)
	}

	[Table(Schema="dbo", Name="Order")]
	public partial class Order
	{
		[PrimaryKey, Identity   ] public int       Id                                      { get; set; } // int
		[Column,     NotNull    ] public Guid      OrderGuid                               { get; set; } // uniqueidentifier
		[Column,     NotNull    ] public int       StoreId                                 { get; set; } // int
		[Column,     NotNull    ] public int       CustomerId                              { get; set; } // int
		[Column,     NotNull    ] public int       BillingAddressId                        { get; set; } // int
		[Column,        Nullable] public int?      ShippingAddressId                       { get; set; } // int
		[Column,        Nullable] public int?      PickupAddressId                         { get; set; } // int
		[Column,     NotNull    ] public bool      PickupInStore                           { get; set; } // bit
		[Column,     NotNull    ] public int       OrderStatusId                           { get; set; } // int
		[Column,     NotNull    ] public int       ShippingStatusId                        { get; set; } // int
		[Column,     NotNull    ] public int       PaymentStatusId                         { get; set; } // int
		[Column,        Nullable] public string    PaymentMethodSystemName                 { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    CustomerCurrencyCode                    { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public decimal   CurrencyRate                            { get; set; } // decimal(18, 8)
		[Column,     NotNull    ] public int       CustomerTaxDisplayTypeId                { get; set; } // int
		[Column,        Nullable] public string    VatNumber                               { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public decimal   OrderSubtotalInclTax                    { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   OrderSubtotalExclTax                    { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   OrderSubTotalDiscountInclTax            { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   OrderSubTotalDiscountExclTax            { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   OrderShippingInclTax                    { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   OrderShippingExclTax                    { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   PaymentMethodAdditionalFeeInclTax       { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   PaymentMethodAdditionalFeeExclTax       { get; set; } // decimal(18, 4)
		[Column,        Nullable] public string    TaxRates                                { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public decimal   OrderTax                                { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   OrderDiscount                           { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   OrderTotal                              { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   RefundedAmount                          { get; set; } // decimal(18, 4)
		[Column,        Nullable] public int?      RewardPointsHistoryEntryId              { get; set; } // int
		[Column,        Nullable] public string    CheckoutAttributeDescription            { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    CheckoutAttributesXml                   { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int       CustomerLanguageId                      { get; set; } // int
		[Column,     NotNull    ] public int       AffiliateId                             { get; set; } // int
		[Column,        Nullable] public string    CustomerIp                              { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool      AllowStoringCreditCardNumber            { get; set; } // bit
		[Column,        Nullable] public string    CardType                                { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    CardName                                { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    CardNumber                              { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    MaskedCreditCardNumber                  { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    CardCvv2                                { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    CardExpirationMonth                     { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    CardExpirationYear                      { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    AuthorizationTransactionId              { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    AuthorizationTransactionCode            { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    AuthorizationTransactionResult          { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    CaptureTransactionId                    { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    CaptureTransactionResult                { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    SubscriptionTransactionId               { get; set; } // nvarchar(max)
		[Column,        Nullable] public DateTime? PaidDateUtc                             { get; set; } // datetime2(7)
		[Column,        Nullable] public string    ShippingMethod                          { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    ShippingRateComputationMethodSystemName { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    CustomValuesXml                         { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool      Deleted                                 { get; set; } // bit
		[Column,     NotNull    ] public DateTime  CreatedOnUtc                            { get; set; } // datetime2(7)
		[Column,     NotNull    ] public string    CustomOrderNumber                       { get; set; } // nvarchar(max)
		/// <summary>
		/// ???? ??:General / ???:Gift / ???:JoinClub
		/// </summary>
		[Column,     NotNull    ] public string    OrderType                               { get; set; } // varchar(20)
		/// <summary>
		/// ?????
		/// </summary>
		[Column,     NotNull    ] public bool      Queryable                               { get; set; } // bit
		[Column,        Nullable] public int?      RedeemedRewardPointsEntryId             { get; set; } // int

		#region Associations

		/// <summary>
		/// Order_BillingAddress
		/// </summary>
		[Association(ThisKey="BillingAddressId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Order_BillingAddress", BackReferenceName="OrderBillingAddresses")]
		public Address BillingAddress { get; set; }

		/// <summary>
		/// Order_Customer
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Order_Customer", BackReferenceName="Orders")]
		public Customer Customer { get; set; }

		/// <summary>
		/// DiscountUsageHistory_Order_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="OrderId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<DiscountUsageHistory> DiscountUsageHistories { get; set; }

		/// <summary>
		/// GiftCardUsageHistory_UsedWithOrder_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="UsedWithOrderId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<GiftCardUsageHistory> GiftCardUsageHistoryUsedWithOrders { get; set; }

		/// <summary>
		/// OrderItem_Order_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="OrderId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<OrderItem> OrderItems { get; set; }

		/// <summary>
		/// OrderNote_Order_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="OrderId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<OrderNote> OrderNotes { get; set; }

		/// <summary>
		/// Order_PickupAddress
		/// </summary>
		[Association(ThisKey="PickupAddressId", OtherKey="Id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="Order_PickupAddress", BackReferenceName="OrderPickupAddresses")]
		public Address PickupAddress { get; set; }

		/// <summary>
		/// RecurringPayment_InitialOrder_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="InitialOrderId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<RecurringPayment> RecurringPaymentInitialOrders { get; set; }

		/// <summary>
		/// RewardPointsHistory_UsedWithOrder_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="UsedWithOrderId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<RewardPointsHistory> RewardPointsHistoryUsedWithOrders { get; set; }

		/// <summary>
		/// Shipment_Order_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="OrderId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Shipment> Shipments { get; set; }

		/// <summary>
		/// Order_ShippingAddress
		/// </summary>
		[Association(ThisKey="ShippingAddressId", OtherKey="Id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="Order_ShippingAddress", BackReferenceName="OrderShippingAddresses")]
		public Address ShippingAddress { get; set; }

		#endregion
	}

	/// <summary>
	/// ?????????
	/// </summary>
	[Table(Schema="dbo", Name="OrderBatchCancelTask")]
	public partial class OrderBatchCancelTask
	{
		/// <summary>
		/// ???
		/// </summary>
		[PrimaryKey, Identity   ] public int    Id         { get; set; } // int
		/// <summary>
		/// ????
		/// </summary>
		[Column,     NotNull    ] public int    OrderId    { get; set; } // int
		/// <summary>
		/// ??
		/// </summary>
		[Column,        Nullable] public string Status     { get; set; } // nvarchar(20)
		/// <summary>
		/// ????
		/// </summary>
		[Column,        Nullable] public short? ErrorCount { get; set; } // smallint
		/// <summary>
		/// ??
		/// </summary>
		[Column,        Nullable] public string Message    { get; set; } // nvarchar(1000)
	}

	[Table(Schema="dbo", Name="OrderItem")]
	public partial class OrderItem
	{
		[PrimaryKey, Identity   ] public int       Id                    { get; set; } // int
		[Column,     NotNull    ] public Guid      OrderItemGuid         { get; set; } // uniqueidentifier
		[Column,     NotNull    ] public int       OrderId               { get; set; } // int
		[Column,     NotNull    ] public int       ProductId             { get; set; } // int
		[Column,     NotNull    ] public int       Quantity              { get; set; } // int
		[Column,     NotNull    ] public decimal   UnitPriceInclTax      { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   UnitPriceExclTax      { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   PriceInclTax          { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   PriceExclTax          { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   DiscountAmountInclTax { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   DiscountAmountExclTax { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   OriginalProductCost   { get; set; } // decimal(18, 4)
		[Column,        Nullable] public string    AttributeDescription  { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    AttributesXml         { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int       DownloadCount         { get; set; } // int
		[Column,     NotNull    ] public bool      IsDownloadActivated   { get; set; } // bit
		[Column,        Nullable] public int?      LicenseDownloadId     { get; set; } // int
		[Column,        Nullable] public decimal?  ItemWeight            { get; set; } // decimal(18, 4)
		[Column,        Nullable] public DateTime? RentalStartDateUtc    { get; set; } // datetime2(7)
		[Column,        Nullable] public DateTime? RentalEndDateUtc      { get; set; } // datetime2(7)
		[Column,     NotNull    ] public int       ReturnQuantity        { get; set; } // int
		[Column,     NotNull    ] public decimal   ReturnAmount          { get; set; } // decimal(18, 4)

		#region Associations

		/// <summary>
		/// CancelRequest_OrderItems_Target_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="OrderItemId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<CancelRequestOrderItemsMapping> CancelRequestOrderItemsTargets { get; set; }

		/// <summary>
		/// GiftCard_PurchasedWithOrderItem_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="PurchasedWithOrderItemId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<GiftCard> GiftCardPurchasedWithOrderItems { get; set; }

		/// <summary>
		/// OrderItem_Order
		/// </summary>
		[Association(ThisKey="OrderId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="OrderItem_Order", BackReferenceName="OrderItems")]
		public Order Order { get; set; }

		/// <summary>
		/// OrderItem_Product
		/// </summary>
		[Association(ThisKey="ProductId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="OrderItem_Product", BackReferenceName="OrderItems")]
		public Product Product { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="OrderItem_update")]
	public partial class OrderItemUpdate
	{
		[PrimaryKey, NotNull    ] public int       Id                    { get; set; } // int
		[Column,     NotNull    ] public Guid      OrderItemGuid         { get; set; } // uniqueidentifier
		[Column,     NotNull    ] public int       OrderId               { get; set; } // int
		[Column,     NotNull    ] public int       ProductId             { get; set; } // int
		[Column,     NotNull    ] public int       Quantity              { get; set; } // int
		[Column,     NotNull    ] public decimal   UnitPriceInclTax      { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   UnitPriceExclTax      { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   PriceInclTax          { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   PriceExclTax          { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   DiscountAmountInclTax { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   DiscountAmountExclTax { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   OriginalProductCost   { get; set; } // decimal(18, 4)
		[Column,        Nullable] public string    AttributeDescription  { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    AttributesXml         { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int       DownloadCount         { get; set; } // int
		[Column,     NotNull    ] public bool      IsDownloadActivated   { get; set; } // bit
		[Column,        Nullable] public int?      LicenseDownloadId     { get; set; } // int
		[Column,        Nullable] public decimal?  ItemWeight            { get; set; } // decimal(18, 4)
		[Column,        Nullable] public DateTime? RentalStartDateUtc    { get; set; } // datetime
		[Column,        Nullable] public DateTime? RentalEndDateUtc      { get; set; } // datetime
	}

	[Table(Schema="dbo", Name="OrderNote")]
	public partial class OrderNote
	{
		[PrimaryKey, Identity] public int      Id                { get; set; } // int
		[Column,     NotNull ] public int      OrderId           { get; set; } // int
		[Column,     NotNull ] public string   Note              { get; set; } // nvarchar(max)
		[Column,     NotNull ] public int      DownloadId        { get; set; } // int
		[Column,     NotNull ] public bool     DisplayToCustomer { get; set; } // bit
		[Column,     NotNull ] public DateTime CreatedOnUtc      { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// OrderNote_Order
		/// </summary>
		[Association(ThisKey="OrderId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="OrderNote_Order", BackReferenceName="OrderNotes")]
		public Order Order { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="PagesDetail")]
	public partial class PagesDetail
	{
		[PrimaryKey, Identity] public int    Id          { get; set; } // int
		[Column,     Nullable] public string PageTitle   { get; set; } // nvarchar(max)
		[Column,     Nullable] public string SystemName  { get; set; } // nvarchar(max)
		[Column,     Nullable] public string DirHtmlName { get; set; } // nvarchar(max)
	}

	[Table(Schema="dbo", Name="PermissionRecord")]
	public partial class PermissionRecord
	{
		[PrimaryKey, Identity] public int    Id         { get; set; } // int
		[Column,     NotNull ] public string Name       { get; set; } // nvarchar(max)
		[Column,     NotNull ] public string SystemName { get; set; } // nvarchar(255)
		[Column,     NotNull ] public string Category   { get; set; } // nvarchar(255)

		#region Associations

		/// <summary>
		/// PermissionRecord_CustomerRoles_Source_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="PermissionRecordId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<PermissionRecordRoleMapping> CustomerRolesSources { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="PermissionRecord_Role_Mapping")]
	public partial class PermissionRecordRoleMapping
	{
		[Column("PermissionRecord_Id"), PrimaryKey(1), NotNull] public int PermissionRecordId { get; set; } // int
		[Column("CustomerRole_Id"),     PrimaryKey(2), NotNull] public int CustomerRoleId     { get; set; } // int

		#region Associations

		/// <summary>
		/// PermissionRecord_CustomerRoles_Target
		/// </summary>
		[Association(ThisKey="CustomerRoleId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="PermissionRecord_CustomerRoles_Target", BackReferenceName="PermissionRecordCustomerRolesTargets")]
		public CustomerRole CustomerRole { get; set; }

		/// <summary>
		/// PermissionRecord_CustomerRoles_Source
		/// </summary>
		[Association(ThisKey="PermissionRecordId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="PermissionRecord_CustomerRoles_Source", BackReferenceName="CustomerRolesSources")]
		public PermissionRecord PermissionRecord { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Picture")]
	public partial class Picture
	{
		[PrimaryKey, Identity   ] public int    Id             { get; set; } // int
		[Column,     NotNull    ] public string MimeType       { get; set; } // nvarchar(40)
		[Column,        Nullable] public string SeoFilename    { get; set; } // nvarchar(300)
		[Column,        Nullable] public string AltAttribute   { get; set; } // nvarchar(max)
		[Column,        Nullable] public string TitleAttribute { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool   IsNew          { get; set; } // bit
		[Column,        Nullable] public string VirtualPath    { get; set; } // nvarchar(max)

		#region Associations

		/// <summary>
		/// FK_PictureBinary_Picture_PictureId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="PictureId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<PictureBinary> PictureBinaryPictureIds { get; set; }

		/// <summary>
		/// ProductPicture_Picture_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="PictureId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProductPictureMapping> ProductPictures { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="PictureBinary")]
	public partial class PictureBinary
	{
		[PrimaryKey, Identity   ] public int    Id         { get; set; } // int
		[Column,     NotNull    ] public int    PictureId  { get; set; } // int
		[Column,        Nullable] public byte[] BinaryData { get; set; } // varbinary(max)

		#region Associations

		/// <summary>
		/// FK_PictureBinary_Picture_PictureId
		/// </summary>
		[Association(ThisKey="PictureId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_PictureBinary_Picture_PictureId", BackReferenceName="PictureBinaryPictureIds")]
		public Picture Picture { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Poll")]
	public partial class Poll
	{
		[PrimaryKey, Identity   ] public int       Id                { get; set; } // int
		[Column,     NotNull    ] public int       LanguageId        { get; set; } // int
		[Column,     NotNull    ] public string    Name              { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    SystemKeyword     { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool      Published         { get; set; } // bit
		[Column,     NotNull    ] public bool      ShowOnHomepage    { get; set; } // bit
		[Column,     NotNull    ] public bool      AllowGuestsToVote { get; set; } // bit
		[Column,     NotNull    ] public int       DisplayOrder      { get; set; } // int
		[Column,        Nullable] public DateTime? StartDateUtc      { get; set; } // datetime2(7)
		[Column,        Nullable] public DateTime? EndDateUtc        { get; set; } // datetime2(7)
		[Column,     NotNull    ] public bool      LimitedToStores   { get; set; } // bit

		#region Associations

		/// <summary>
		/// Poll_Language
		/// </summary>
		[Association(ThisKey="LanguageId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Poll_Language", BackReferenceName="Polls")]
		public Language Language { get; set; }

		/// <summary>
		/// PollAnswer_Poll_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="PollId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<PollAnswer> PollAnswers { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="PollAnswer")]
	public partial class PollAnswer
	{
		[PrimaryKey, Identity] public int    Id            { get; set; } // int
		[Column,     NotNull ] public int    PollId        { get; set; } // int
		[Column,     NotNull ] public string Name          { get; set; } // nvarchar(max)
		[Column,     NotNull ] public int    NumberOfVotes { get; set; } // int
		[Column,     NotNull ] public int    DisplayOrder  { get; set; } // int

		#region Associations

		/// <summary>
		/// PollAnswer_Poll
		/// </summary>
		[Association(ThisKey="PollId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="PollAnswer_Poll", BackReferenceName="PollAnswers")]
		public Poll Poll { get; set; }

		/// <summary>
		/// PollVotingRecord_PollAnswer_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="PollAnswerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<PollVotingRecord> PollVotingRecords { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="PollVotingRecord")]
	public partial class PollVotingRecord
	{
		[PrimaryKey, Identity] public int      Id           { get; set; } // int
		[Column,     NotNull ] public int      PollAnswerId { get; set; } // int
		[Column,     NotNull ] public int      CustomerId   { get; set; } // int
		[Column,     NotNull ] public DateTime CreatedOnUtc { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// PollVotingRecord_Customer
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="PollVotingRecord_Customer", BackReferenceName="PollVotingRecords")]
		public Customer Customer { get; set; }

		/// <summary>
		/// PollVotingRecord_PollAnswer
		/// </summary>
		[Association(ThisKey="PollAnswerId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="PollVotingRecord_PollAnswer", BackReferenceName="PollVotingRecords")]
		public PollAnswer PollAnswer { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="PredefinedProductAttributeValue")]
	public partial class PredefinedProductAttributeValue
	{
		[PrimaryKey, Identity] public int     Id                           { get; set; } // int
		[Column,     NotNull ] public int     ProductAttributeId           { get; set; } // int
		[Column,     NotNull ] public string  Name                         { get; set; } // nvarchar(400)
		[Column,     NotNull ] public decimal PriceAdjustment              { get; set; } // decimal(18, 4)
		[Column,     NotNull ] public decimal WeightAdjustment             { get; set; } // decimal(18, 4)
		[Column,     NotNull ] public decimal Cost                         { get; set; } // decimal(18, 4)
		[Column,     NotNull ] public bool    IsPreSelected                { get; set; } // bit
		[Column,     NotNull ] public int     DisplayOrder                 { get; set; } // int
		[Column,     NotNull ] public bool    PriceAdjustmentUsePercentage { get; set; } // bit

		#region Associations

		/// <summary>
		/// PredefinedProductAttributeValue_ProductAttribute
		/// </summary>
		[Association(ThisKey="ProductAttributeId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="PredefinedProductAttributeValue_ProductAttribute", BackReferenceName="PredefinedProductAttributeValues")]
		public ProductAttribute ProductAttribute { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Product")]
	public partial class Product
	{
		[PrimaryKey, Identity   ] public int       Id                                                     { get; set; } // int
		[Column,     NotNull    ] public int       ProductTypeId                                          { get; set; } // int
		[Column,     NotNull    ] public int       ParentGroupedProductId                                 { get; set; } // int
		[Column,     NotNull    ] public bool      VisibleIndividually                                    { get; set; } // bit
		[Column,     NotNull    ] public string    Name                                                   { get; set; } // nvarchar(400)
		[Column,        Nullable] public string    ShortDescription                                       { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    FullDescription                                        { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    AdminComment                                           { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int       ProductTemplateId                                      { get; set; } // int
		[Column,     NotNull    ] public int       VendorId                                               { get; set; } // int
		[Column,     NotNull    ] public bool      ShowOnHomepage                                         { get; set; } // bit
		[Column,        Nullable] public string    MetaKeywords                                           { get; set; } // nvarchar(400)
		[Column,        Nullable] public string    MetaDescription                                        { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    MetaTitle                                              { get; set; } // nvarchar(400)
		[Column,     NotNull    ] public bool      AllowCustomerReviews                                   { get; set; } // bit
		[Column,     NotNull    ] public int       ApprovedRatingSum                                      { get; set; } // int
		[Column,     NotNull    ] public int       NotApprovedRatingSum                                   { get; set; } // int
		[Column,     NotNull    ] public int       ApprovedTotalReviews                                   { get; set; } // int
		[Column,     NotNull    ] public int       NotApprovedTotalReviews                                { get; set; } // int
		[Column,     NotNull    ] public bool      SubjectToAcl                                           { get; set; } // bit
		[Column,     NotNull    ] public bool      LimitedToStores                                        { get; set; } // bit
		[Column,        Nullable] public string    Sku                                                    { get; set; } // nvarchar(400)
		[Column,        Nullable] public string    ManufacturerPartNumber                                 { get; set; } // nvarchar(400)
		[Column,        Nullable] public string    Gtin                                                   { get; set; } // nvarchar(400)
		[Column,     NotNull    ] public bool      IsGiftCard                                             { get; set; } // bit
		[Column,     NotNull    ] public int       GiftCardTypeId                                         { get; set; } // int
		[Column,        Nullable] public decimal?  OverriddenGiftCardAmount                               { get; set; } // decimal(18, 2)
		[Column,     NotNull    ] public bool      RequireOtherProducts                                   { get; set; } // bit
		[Column,        Nullable] public string    RequiredProductIds                                     { get; set; } // nvarchar(1000)
		[Column,     NotNull    ] public bool      AutomaticallyAddRequiredProducts                       { get; set; } // bit
		[Column,     NotNull    ] public bool      IsDownload                                             { get; set; } // bit
		[Column,     NotNull    ] public int       DownloadId                                             { get; set; } // int
		[Column,     NotNull    ] public bool      UnlimitedDownloads                                     { get; set; } // bit
		[Column,     NotNull    ] public int       MaxNumberOfDownloads                                   { get; set; } // int
		[Column,        Nullable] public int?      DownloadExpirationDays                                 { get; set; } // int
		[Column,     NotNull    ] public int       DownloadActivationTypeId                               { get; set; } // int
		[Column,     NotNull    ] public bool      HasSampleDownload                                      { get; set; } // bit
		[Column,     NotNull    ] public int       SampleDownloadId                                       { get; set; } // int
		[Column,     NotNull    ] public bool      HasUserAgreement                                       { get; set; } // bit
		[Column,        Nullable] public string    UserAgreementText                                      { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool      IsRecurring                                            { get; set; } // bit
		[Column,     NotNull    ] public int       RecurringCycleLength                                   { get; set; } // int
		[Column,     NotNull    ] public int       RecurringCyclePeriodId                                 { get; set; } // int
		[Column,     NotNull    ] public int       RecurringTotalCycles                                   { get; set; } // int
		[Column,     NotNull    ] public bool      IsRental                                               { get; set; } // bit
		[Column,     NotNull    ] public int       RentalPriceLength                                      { get; set; } // int
		[Column,     NotNull    ] public int       RentalPricePeriodId                                    { get; set; } // int
		[Column,     NotNull    ] public bool      IsShipEnabled                                          { get; set; } // bit
		[Column,     NotNull    ] public bool      IsFreeShipping                                         { get; set; } // bit
		[Column,     NotNull    ] public bool      ShipSeparately                                         { get; set; } // bit
		[Column,     NotNull    ] public decimal   AdditionalShippingCharge                               { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public int       DeliveryDateId                                         { get; set; } // int
		[Column,     NotNull    ] public bool      IsTaxExempt                                            { get; set; } // bit
		[Column,     NotNull    ] public int       TaxCategoryId                                          { get; set; } // int
		[Column,     NotNull    ] public bool      IsTelecommunicationsOrBroadcastingOrElectronicServices { get; set; } // bit
		[Column,     NotNull    ] public int       ManageInventoryMethodId                                { get; set; } // int
		[Column,     NotNull    ] public int       ProductAvailabilityRangeId                             { get; set; } // int
		[Column,     NotNull    ] public bool      UseMultipleWarehouses                                  { get; set; } // bit
		[Column,     NotNull    ] public int       WarehouseId                                            { get; set; } // int
		[Column,     NotNull    ] public int       StockQuantity                                          { get; set; } // int
		[Column,     NotNull    ] public bool      DisplayStockAvailability                               { get; set; } // bit
		[Column,     NotNull    ] public bool      DisplayStockQuantity                                   { get; set; } // bit
		[Column,     NotNull    ] public int       MinStockQuantity                                       { get; set; } // int
		[Column,     NotNull    ] public int       LowStockActivityId                                     { get; set; } // int
		[Column,     NotNull    ] public int       NotifyAdminForQuantityBelow                            { get; set; } // int
		[Column,     NotNull    ] public int       BackorderModeId                                        { get; set; } // int
		[Column,     NotNull    ] public bool      AllowBackInStockSubscriptions                          { get; set; } // bit
		[Column,     NotNull    ] public int       OrderMinimumQuantity                                   { get; set; } // int
		[Column,     NotNull    ] public int       OrderMaximumQuantity                                   { get; set; } // int
		[Column,        Nullable] public string    AllowedQuantities                                      { get; set; } // nvarchar(1000)
		[Column,     NotNull    ] public bool      AllowAddingOnlyExistingAttributeCombinations           { get; set; } // bit
		[Column,     NotNull    ] public bool      NotReturnable                                          { get; set; } // bit
		[Column,     NotNull    ] public bool      DisableBuyButton                                       { get; set; } // bit
		[Column,     NotNull    ] public bool      DisableWishlistButton                                  { get; set; } // bit
		[Column,     NotNull    ] public bool      AvailableForPreOrder                                   { get; set; } // bit
		[Column,        Nullable] public DateTime? PreOrderAvailabilityStartDateTimeUtc                   { get; set; } // datetime2(7)
		[Column,     NotNull    ] public bool      CallForPrice                                           { get; set; } // bit
		[Column,     NotNull    ] public decimal   Price                                                  { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   OldPrice                                               { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   ProductCost                                            { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public bool      CustomerEntersPrice                                    { get; set; } // bit
		[Column,     NotNull    ] public decimal   MinimumCustomerEnteredPrice                            { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   MaximumCustomerEnteredPrice                            { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public bool      BasepriceEnabled                                       { get; set; } // bit
		[Column,     NotNull    ] public decimal   BasepriceAmount                                        { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public int       BasepriceUnitId                                        { get; set; } // int
		[Column,     NotNull    ] public decimal   BasepriceBaseAmount                                    { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public int       BasepriceBaseUnitId                                    { get; set; } // int
		[Column,     NotNull    ] public bool      MarkAsNew                                              { get; set; } // bit
		[Column,        Nullable] public DateTime? MarkAsNewStartDateTimeUtc                              { get; set; } // datetime2(7)
		[Column,        Nullable] public DateTime? MarkAsNewEndDateTimeUtc                                { get; set; } // datetime2(7)
		[Column,     NotNull    ] public bool      HasTierPrices                                          { get; set; } // bit
		[Column,     NotNull    ] public bool      HasDiscountsApplied                                    { get; set; } // bit
		[Column,     NotNull    ] public decimal   Weight                                                 { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   Length                                                 { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   Width                                                  { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal   Height                                                 { get; set; } // decimal(18, 4)
		[Column,        Nullable] public DateTime? AvailableStartDateTimeUtc                              { get; set; } // datetime2(7)
		[Column,        Nullable] public DateTime? AvailableEndDateTimeUtc                                { get; set; } // datetime2(7)
		[Column,     NotNull    ] public int       DisplayOrder                                           { get; set; } // int
		[Column,     NotNull    ] public bool      Published                                              { get; set; } // bit
		[Column,     NotNull    ] public bool      Deleted                                                { get; set; } // bit
		[Column,     NotNull    ] public DateTime  CreatedOnUtc                                           { get; set; } // datetime2(7)
		[Column,     NotNull    ] public DateTime  UpdatedOnUtc                                           { get; set; } // datetime2(7)
		[Column,        Nullable] public string    AllowedPurchaseCount                                   { get; set; } // varchar(10)
		[Column,        Nullable] public bool?     IsJoinClubProduct                                      { get; set; } // bit
		[Column,        Nullable] public bool?     IsGroupBuying                                          { get; set; } // bit
		[Column,        Nullable] public byte?     JoinClubShippingMethodId                               { get; set; } // tinyint

		#region Associations

		/// <summary>
		/// BackInStockSubscription_Product_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<BackInStockSubscription> BackInStockSubscriptions { get; set; }

		/// <summary>
		/// Discount_AppliedToProducts_Target_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<DiscountAppliedToProduct> DiscountAppliedToProductsTargets { get; set; }

		/// <summary>
		/// OrderItem_Product_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<OrderItem> OrderItems { get; set; }

		/// <summary>
		/// ProductAttributeCombination_Product_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProductAttributeCombination> ProductAttributeCombinations { get; set; }

		/// <summary>
		/// ProductAttributeMapping_Product_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProductProductAttributeMapping> ProductAttributeMappings { get; set; }

		/// <summary>
		/// ProductCategory_Product_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProductCategoryMapping> ProductCategories { get; set; }

		/// <summary>
		/// ProductManufacturer_Product_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProductManufacturerMapping> ProductManufacturers { get; set; }

		/// <summary>
		/// ProductPicture_Product_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProductPictureMapping> ProductPictures { get; set; }

		/// <summary>
		/// ProductReview_Product_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProductReview> ProductReviews { get; set; }

		/// <summary>
		/// ProductSpecificationAttribute_Product_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProductSpecificationAttributeMapping> ProductSpecificationAttributes { get; set; }

		/// <summary>
		/// Product_ProductTags_Source_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProductProductTagMapping> ProductTagsSources { get; set; }

		/// <summary>
		/// ProductWarehouseInventory_Product_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProductWarehouseInventory> ProductWarehouseInventories { get; set; }

		/// <summary>
		/// ShoppingCartItem_Product_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ShoppingCartItem> ShoppingCartItems { get; set; }

		/// <summary>
		/// StockQuantityHistory_Product_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<StockQuantityHistory> StockQuantityHistories { get; set; }

		/// <summary>
		/// TierPrice_Product_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<TierPrice> TierPrices { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="ProductAttribute")]
	public partial class ProductAttribute
	{
		[PrimaryKey, Identity   ] public int    Id          { get; set; } // int
		[Column,     NotNull    ] public string Name        { get; set; } // nvarchar(max)
		[Column,        Nullable] public string Description { get; set; } // nvarchar(max)

		#region Associations

		/// <summary>
		/// PredefinedProductAttributeValue_ProductAttribute_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductAttributeId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<PredefinedProductAttributeValue> PredefinedProductAttributeValues { get; set; }

		/// <summary>
		/// ProductAttributeMapping_ProductAttribute_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductAttributeId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProductProductAttributeMapping> ProductAttributeMappings { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="ProductAttributeCombination")]
	public partial class ProductAttributeCombination
	{
		[PrimaryKey, Identity   ] public int      Id                          { get; set; } // int
		[Column,     NotNull    ] public int      ProductId                   { get; set; } // int
		[Column,        Nullable] public string   AttributesXml               { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int      StockQuantity               { get; set; } // int
		[Column,     NotNull    ] public bool     AllowOutOfStockOrders       { get; set; } // bit
		[Column,        Nullable] public string   Sku                         { get; set; } // nvarchar(400)
		[Column,        Nullable] public string   ManufacturerPartNumber      { get; set; } // nvarchar(400)
		[Column,        Nullable] public string   Gtin                        { get; set; } // nvarchar(400)
		[Column,        Nullable] public decimal? OverriddenPrice             { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public int      NotifyAdminForQuantityBelow { get; set; } // int
		[Column,     NotNull    ] public int      PictureId                   { get; set; } // int

		#region Associations

		/// <summary>
		/// ProductAttributeCombination_Product
		/// </summary>
		[Association(ThisKey="ProductId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ProductAttributeCombination_Product", BackReferenceName="ProductAttributeCombinations")]
		public Product Product { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="ProductAttributeValue")]
	public partial class ProductAttributeValue
	{
		[PrimaryKey, Identity   ] public int     Id                           { get; set; } // int
		[Column,     NotNull    ] public int     ProductAttributeMappingId    { get; set; } // int
		[Column,     NotNull    ] public int     AttributeValueTypeId         { get; set; } // int
		[Column,     NotNull    ] public int     AssociatedProductId          { get; set; } // int
		[Column,     NotNull    ] public string  Name                         { get; set; } // nvarchar(400)
		[Column,        Nullable] public string  ColorSquaresRgb              { get; set; } // nvarchar(100)
		[Column,     NotNull    ] public int     ImageSquaresPictureId        { get; set; } // int
		[Column,     NotNull    ] public decimal PriceAdjustment              { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal WeightAdjustment             { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public decimal Cost                         { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public bool    CustomerEntersQty            { get; set; } // bit
		[Column,     NotNull    ] public int     Quantity                     { get; set; } // int
		[Column,     NotNull    ] public bool    IsPreSelected                { get; set; } // bit
		[Column,     NotNull    ] public int     DisplayOrder                 { get; set; } // int
		[Column,     NotNull    ] public int     PictureId                    { get; set; } // int
		[Column,     NotNull    ] public bool    PriceAdjustmentUsePercentage { get; set; } // bit
		[Column,        Nullable] public bool?   IsLimited                    { get; set; } // bit
		[Column,        Nullable] public int?    Threshold                    { get; set; } // int

		#region Associations

		/// <summary>
		/// ProductAttributeValue_ProductAttributeMapping
		/// </summary>
		[Association(ThisKey="ProductAttributeMappingId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ProductAttributeValue_ProductAttributeMapping", BackReferenceName="ProductAttributeValueProductAttributeMappings")]
		public ProductProductAttributeMapping ProductAttributeMapping { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="ProductAvailabilityRange")]
	public partial class ProductAvailabilityRange
	{
		[PrimaryKey, Identity] public int    Id           { get; set; } // int
		[Column,     NotNull ] public string Name         { get; set; } // nvarchar(400)
		[Column,     NotNull ] public int    DisplayOrder { get; set; } // int
	}

	[Table(Schema="dbo", Name="Product_Category_Mapping")]
	public partial class ProductCategoryMapping
	{
		[PrimaryKey, Identity] public int  Id                { get; set; } // int
		[Column,     NotNull ] public int  ProductId         { get; set; } // int
		[Column,     NotNull ] public int  CategoryId        { get; set; } // int
		[Column,     NotNull ] public bool IsFeaturedProduct { get; set; } // bit
		[Column,     NotNull ] public int  DisplayOrder      { get; set; } // int

		#region Associations

		/// <summary>
		/// ProductCategory_Category
		/// </summary>
		[Association(ThisKey="CategoryId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ProductCategory_Category", BackReferenceName="ProductCategories")]
		public Category Category { get; set; }

		/// <summary>
		/// ProductCategory_Product
		/// </summary>
		[Association(ThisKey="ProductId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ProductCategory_Product", BackReferenceName="ProductCategories")]
		public Product Product { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Product_Manufacturer_Mapping")]
	public partial class ProductManufacturerMapping
	{
		[PrimaryKey, Identity] public int  Id                { get; set; } // int
		[Column,     NotNull ] public int  ProductId         { get; set; } // int
		[Column,     NotNull ] public int  ManufacturerId    { get; set; } // int
		[Column,     NotNull ] public bool IsFeaturedProduct { get; set; } // bit
		[Column,     NotNull ] public int  DisplayOrder      { get; set; } // int

		#region Associations

		/// <summary>
		/// ProductManufacturer_Manufacturer
		/// </summary>
		[Association(ThisKey="ManufacturerId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ProductManufacturer_Manufacturer", BackReferenceName="ProductManufacturers")]
		public Manufacturer Manufacturer { get; set; }

		/// <summary>
		/// ProductManufacturer_Product
		/// </summary>
		[Association(ThisKey="ProductId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ProductManufacturer_Product", BackReferenceName="ProductManufacturers")]
		public Product Product { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Product_Picture_Mapping")]
	public partial class ProductPictureMapping
	{
		[PrimaryKey, Identity] public int Id           { get; set; } // int
		[Column,     NotNull ] public int ProductId    { get; set; } // int
		[Column,     NotNull ] public int PictureId    { get; set; } // int
		[Column,     NotNull ] public int DisplayOrder { get; set; } // int

		#region Associations

		/// <summary>
		/// ProductPicture_Picture
		/// </summary>
		[Association(ThisKey="PictureId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ProductPicture_Picture", BackReferenceName="ProductPictures")]
		public Picture Picture { get; set; }

		/// <summary>
		/// ProductPicture_Product
		/// </summary>
		[Association(ThisKey="ProductId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ProductPicture_Product", BackReferenceName="ProductPictures")]
		public Product Product { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Product_ProductAttribute_Mapping")]
	public partial class ProductProductAttributeMapping
	{
		[PrimaryKey, Identity   ] public int    Id                              { get; set; } // int
		[Column,     NotNull    ] public int    ProductId                       { get; set; } // int
		[Column,     NotNull    ] public int    ProductAttributeId              { get; set; } // int
		[Column,        Nullable] public string TextPrompt                      { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool   IsRequired                      { get; set; } // bit
		[Column,     NotNull    ] public int    AttributeControlTypeId          { get; set; } // int
		[Column,     NotNull    ] public int    DisplayOrder                    { get; set; } // int
		[Column,        Nullable] public int?   ValidationMinLength             { get; set; } // int
		[Column,        Nullable] public int?   ValidationMaxLength             { get; set; } // int
		[Column,        Nullable] public string ValidationFileAllowedExtensions { get; set; } // nvarchar(max)
		[Column,        Nullable] public int?   ValidationFileMaximumSize       { get; set; } // int
		[Column,        Nullable] public string DefaultValue                    { get; set; } // nvarchar(max)
		[Column,        Nullable] public string ConditionAttributeXml           { get; set; } // nvarchar(max)

		#region Associations

		/// <summary>
		/// ProductAttributeMapping_Product
		/// </summary>
		[Association(ThisKey="ProductId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ProductAttributeMapping_Product", BackReferenceName="ProductAttributeMappings")]
		public Product Product { get; set; }

		/// <summary>
		/// ProductAttributeMapping_ProductAttribute
		/// </summary>
		[Association(ThisKey="ProductAttributeId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ProductAttributeMapping_ProductAttribute", BackReferenceName="ProductAttributeMappings")]
		public ProductAttribute ProductAttribute { get; set; }

		/// <summary>
		/// ProductAttributeValue_ProductAttributeMapping_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductAttributeMappingId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProductAttributeValue> ProductAttributeValueProductAttributeMappings { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Product_ProductTag_Mapping")]
	public partial class ProductProductTagMapping
	{
		[Column("Product_Id"),    PrimaryKey(1), NotNull] public int ProductId    { get; set; } // int
		[Column("ProductTag_Id"), PrimaryKey(2), NotNull] public int ProductTagId { get; set; } // int

		#region Associations

		/// <summary>
		/// Product_ProductTags_Source
		/// </summary>
		[Association(ThisKey="ProductId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Product_ProductTags_Source", BackReferenceName="ProductTagsSources")]
		public Product Product { get; set; }

		/// <summary>
		/// Product_ProductTags_Target
		/// </summary>
		[Association(ThisKey="ProductTagId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Product_ProductTags_Target", BackReferenceName="ProductProductTagsTargets")]
		public ProductTag ProductTag { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="ProductReview")]
	public partial class ProductReview
	{
		[PrimaryKey, Identity   ] public int      Id                      { get; set; } // int
		[Column,     NotNull    ] public int      CustomerId              { get; set; } // int
		[Column,     NotNull    ] public int      ProductId               { get; set; } // int
		[Column,     NotNull    ] public int      StoreId                 { get; set; } // int
		[Column,     NotNull    ] public bool     IsApproved              { get; set; } // bit
		[Column,        Nullable] public string   Title                   { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   ReviewText              { get; set; } // nvarchar(max)
		[Column,        Nullable] public string   ReplyText               { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int      Rating                  { get; set; } // int
		[Column,     NotNull    ] public int      HelpfulYesTotal         { get; set; } // int
		[Column,     NotNull    ] public int      HelpfulNoTotal          { get; set; } // int
		[Column,     NotNull    ] public DateTime CreatedOnUtc            { get; set; } // datetime2(7)
		[Column,     NotNull    ] public bool     CustomerNotifiedOfReply { get; set; } // bit

		#region Associations

		/// <summary>
		/// ProductReview_Customer
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ProductReview_Customer", BackReferenceName="ProductReviews")]
		public Customer Customer { get; set; }

		/// <summary>
		/// ProductReview_Product
		/// </summary>
		[Association(ThisKey="ProductId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ProductReview_Product", BackReferenceName="ProductReviews")]
		public Product Product { get; set; }

		/// <summary>
		/// ProductReviewHelpfulness_ProductReview_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductReviewId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProductReviewHelpfulness> ProductReviewHelpfulnesses { get; set; }

		/// <summary>
		/// ProductReviewReviewTypeRel_ProductReview_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductReviewID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProductReviewReviewTypeMapping> ProductReviewReviewTypeRels { get; set; }

		/// <summary>
		/// ProductReview_Store
		/// </summary>
		[Association(ThisKey="StoreId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ProductReview_Store", BackReferenceName="ProductReviews")]
		public Store Store { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="ProductReviewHelpfulness")]
	public partial class ProductReviewHelpfulness
	{
		[PrimaryKey, Identity] public int  Id              { get; set; } // int
		[Column,     NotNull ] public int  ProductReviewId { get; set; } // int
		[Column,     NotNull ] public bool WasHelpful      { get; set; } // bit
		[Column,     NotNull ] public int  CustomerId      { get; set; } // int

		#region Associations

		/// <summary>
		/// ProductReviewHelpfulness_ProductReview
		/// </summary>
		[Association(ThisKey="ProductReviewId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ProductReviewHelpfulness_ProductReview", BackReferenceName="ProductReviewHelpfulnesses")]
		public ProductReview ProductReview { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="ProductReview_ReviewType_Mapping")]
	public partial class ProductReviewReviewTypeMapping
	{
		[PrimaryKey, Identity] public int Id              { get; set; } // int
		[Column,     NotNull ] public int ProductReviewID { get; set; } // int
		[Column,     NotNull ] public int ReviewTypeID    { get; set; } // int
		[Column,     NotNull ] public int Rating          { get; set; } // int

		#region Associations

		/// <summary>
		/// ProductReviewReviewTypeRel_ProductReview
		/// </summary>
		[Association(ThisKey="ProductReviewID", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ProductReviewReviewTypeRel_ProductReview", BackReferenceName="ProductReviewReviewTypeRels")]
		public ProductReview ProductReview { get; set; }

		/// <summary>
		/// ProductReviewReviewTypeRel_ReviewType
		/// </summary>
		[Association(ThisKey="ReviewTypeID", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ProductReviewReviewTypeRel_ReviewType", BackReferenceName="ProductReviewReviewTypeRels")]
		public ReviewType ReviewType { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Product_SpecificationAttribute_Mapping")]
	public partial class ProductSpecificationAttributeMapping
	{
		[PrimaryKey, Identity   ] public int    Id                             { get; set; } // int
		[Column,     NotNull    ] public int    ProductId                      { get; set; } // int
		[Column,     NotNull    ] public int    AttributeTypeId                { get; set; } // int
		[Column,     NotNull    ] public int    SpecificationAttributeOptionId { get; set; } // int
		[Column,        Nullable] public string CustomValue                    { get; set; } // nvarchar(4000)
		[Column,     NotNull    ] public bool   AllowFiltering                 { get; set; } // bit
		[Column,     NotNull    ] public bool   ShowOnProductPage              { get; set; } // bit
		[Column,     NotNull    ] public int    DisplayOrder                   { get; set; } // int

		#region Associations

		/// <summary>
		/// ProductSpecificationAttribute_Product
		/// </summary>
		[Association(ThisKey="ProductId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ProductSpecificationAttribute_Product", BackReferenceName="ProductSpecificationAttributes")]
		public Product Product { get; set; }

		/// <summary>
		/// ProductSpecificationAttribute_SpecificationAttributeOption
		/// </summary>
		[Association(ThisKey="SpecificationAttributeOptionId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ProductSpecificationAttribute_SpecificationAttributeOption", BackReferenceName="ProductSpecificationAttributes")]
		public SpecificationAttributeOption SpecificationAttributeOption { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="ProductTag")]
	public partial class ProductTag
	{
		[PrimaryKey, Identity] public int    Id   { get; set; } // int
		[Column,     NotNull ] public string Name { get; set; } // nvarchar(400)

		#region Associations

		/// <summary>
		/// Product_ProductTags_Target_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductTagId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProductProductTagMapping> ProductProductTagsTargets { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="ProductTemplate")]
	public partial class ProductTemplate
	{
		[PrimaryKey, Identity   ] public int    Id                  { get; set; } // int
		[Column,     NotNull    ] public string Name                { get; set; } // nvarchar(400)
		[Column,     NotNull    ] public string ViewPath            { get; set; } // nvarchar(400)
		[Column,     NotNull    ] public int    DisplayOrder        { get; set; } // int
		[Column,        Nullable] public string IgnoredProductTypes { get; set; } // nvarchar(max)
	}

	[Table(Schema="dbo", Name="ProductWarehouseInventory")]
	public partial class ProductWarehouseInventory
	{
		[PrimaryKey, Identity] public int Id               { get; set; } // int
		[Column,     NotNull ] public int ProductId        { get; set; } // int
		[Column,     NotNull ] public int WarehouseId      { get; set; } // int
		[Column,     NotNull ] public int StockQuantity    { get; set; } // int
		[Column,     NotNull ] public int ReservedQuantity { get; set; } // int

		#region Associations

		/// <summary>
		/// ProductWarehouseInventory_Product
		/// </summary>
		[Association(ThisKey="ProductId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ProductWarehouseInventory_Product", BackReferenceName="ProductWarehouseInventories")]
		public Product Product { get; set; }

		/// <summary>
		/// ProductWarehouseInventory_Warehouse
		/// </summary>
		[Association(ThisKey="WarehouseId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ProductWarehouseInventory_Warehouse", BackReferenceName="ProductWarehouseInventories")]
		public Warehouse Warehouse { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="QueuedEmail")]
	public partial class QueuedEmail
	{
		[PrimaryKey, Identity   ] public int       Id                    { get; set; } // int
		[Column,     NotNull    ] public int       PriorityId            { get; set; } // int
		[Column,     NotNull    ] public string    From                  { get; set; } // nvarchar(500)
		[Column,        Nullable] public string    FromName              { get; set; } // nvarchar(500)
		[Column,     NotNull    ] public string    To                    { get; set; } // nvarchar(500)
		[Column,        Nullable] public string    ToName                { get; set; } // nvarchar(500)
		[Column,        Nullable] public string    ReplyTo               { get; set; } // nvarchar(500)
		[Column,        Nullable] public string    ReplyToName           { get; set; } // nvarchar(500)
		[Column,        Nullable] public string    CC                    { get; set; } // nvarchar(500)
		[Column,        Nullable] public string    Bcc                   { get; set; } // nvarchar(500)
		[Column,        Nullable] public string    Subject               { get; set; } // nvarchar(1000)
		[Column,        Nullable] public string    Body                  { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    AttachmentFilePath    { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    AttachmentFileName    { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int       AttachedDownloadId    { get; set; } // int
		[Column,     NotNull    ] public DateTime  CreatedOnUtc          { get; set; } // datetime2(7)
		[Column,        Nullable] public DateTime? DontSendBeforeDateUtc { get; set; } // datetime2(7)
		[Column,     NotNull    ] public int       SentTries             { get; set; } // int
		[Column,        Nullable] public DateTime? SentOnUtc             { get; set; } // datetime2(7)
		[Column,     NotNull    ] public int       EmailAccountId        { get; set; } // int

		#region Associations

		/// <summary>
		/// QueuedEmail_EmailAccount
		/// </summary>
		[Association(ThisKey="EmailAccountId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="QueuedEmail_EmailAccount", BackReferenceName="QueuedEmails")]
		public EmailAccount EmailAccount { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="RecurringPayment")]
	public partial class RecurringPayment
	{
		[PrimaryKey, Identity] public int      Id                { get; set; } // int
		[Column,     NotNull ] public int      CycleLength       { get; set; } // int
		[Column,     NotNull ] public int      CyclePeriodId     { get; set; } // int
		[Column,     NotNull ] public int      TotalCycles       { get; set; } // int
		[Column,     NotNull ] public DateTime StartDateUtc      { get; set; } // datetime2(7)
		[Column,     NotNull ] public bool     IsActive          { get; set; } // bit
		[Column,     NotNull ] public bool     LastPaymentFailed { get; set; } // bit
		[Column,     NotNull ] public bool     Deleted           { get; set; } // bit
		[Column,     NotNull ] public int      InitialOrderId    { get; set; } // int
		[Column,     NotNull ] public DateTime CreatedOnUtc      { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// RecurringPayment_InitialOrder
		/// </summary>
		[Association(ThisKey="InitialOrderId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="RecurringPayment_InitialOrder", BackReferenceName="RecurringPaymentInitialOrders")]
		public Order InitialOrder { get; set; }

		/// <summary>
		/// RecurringPaymentHistory_RecurringPayment_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="RecurringPaymentId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<RecurringPaymentHistory> RecurringPaymentHistories { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="RecurringPaymentHistory")]
	public partial class RecurringPaymentHistory
	{
		[PrimaryKey, Identity] public int      Id                 { get; set; } // int
		[Column,     NotNull ] public int      RecurringPaymentId { get; set; } // int
		[Column,     NotNull ] public int      OrderId            { get; set; } // int
		[Column,     NotNull ] public DateTime CreatedOnUtc       { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// RecurringPaymentHistory_RecurringPayment
		/// </summary>
		[Association(ThisKey="RecurringPaymentId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="RecurringPaymentHistory_RecurringPayment", BackReferenceName="RecurringPaymentHistories")]
		public RecurringPayment RecurringPayment { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="RelatedProduct")]
	public partial class RelatedProduct
	{
		[PrimaryKey, Identity] public int Id           { get; set; } // int
		[Column,     NotNull ] public int ProductId1   { get; set; } // int
		[Column,     NotNull ] public int ProductId2   { get; set; } // int
		[Column,     NotNull ] public int DisplayOrder { get; set; } // int
	}

	[Table(Schema="dbo", Name="ReturnRequest")]
	public partial class ReturnRequest
	{
		[PrimaryKey, Identity   ] public int       Id                    { get; set; } // int
		[Column,        Nullable] public string    CustomNumber          { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int       StoreId               { get; set; } // int
		[Column,     NotNull    ] public int       OrderItemId           { get; set; } // int
		[Column,     NotNull    ] public int       CustomerId            { get; set; } // int
		[Column,     NotNull    ] public int       Quantity              { get; set; } // int
		[Column,     NotNull    ] public string    ReasonForReturn       { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public string    RequestedAction       { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    CustomerComments      { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int       UploadedFileId        { get; set; } // int
		[Column,        Nullable] public string    StaffNotes            { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int       ReturnRequestStatusId { get; set; } // int
		[Column,     NotNull    ] public DateTime  CreatedOnUtc          { get; set; } // datetime2(7)
		[Column,     NotNull    ] public DateTime  UpdatedOnUtc          { get; set; } // datetime2(7)
		[Column,        Nullable] public string    StayfunRefundNo       { get; set; } // nvarchar(max)
		[Column,        Nullable] public int?      StayfunRefundAmount   { get; set; } // int
		[Column,        Nullable] public DateTime? RefundedOnUtc         { get; set; } // datetime
		/// <summary>
		/// ?????
		/// </summary>
		[Column,     NotNull    ] public bool      Queryable             { get; set; } // bit

		#region Associations

		/// <summary>
		/// ReturnRequest_Customer
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ReturnRequest_Customer", BackReferenceName="ReturnRequests")]
		public Customer Customer { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="ReturnRequestAction")]
	public partial class ReturnRequestAction
	{
		[PrimaryKey, Identity] public int    Id           { get; set; } // int
		[Column,     NotNull ] public string Name         { get; set; } // nvarchar(400)
		[Column,     NotNull ] public int    DisplayOrder { get; set; } // int
	}

	[Table(Schema="dbo", Name="ReturnRequestReason")]
	public partial class ReturnRequestReason
	{
		[PrimaryKey, Identity] public int    Id           { get; set; } // int
		[Column,     NotNull ] public string Name         { get; set; } // nvarchar(400)
		[Column,     NotNull ] public int    DisplayOrder { get; set; } // int
	}

	[Table(Schema="dbo", Name="ReviewType")]
	public partial class ReviewType
	{
		[PrimaryKey, Identity] public int    Id                    { get; set; } // int
		[Column,     NotNull ] public string Name                  { get; set; } // nvarchar(max)
		[Column,     NotNull ] public string Description           { get; set; } // nvarchar(max)
		[Column,     NotNull ] public int    DisplayOrder          { get; set; } // int
		[Column,     NotNull ] public bool   VisibleToAllCustomers { get; set; } // bit
		[Column,     NotNull ] public bool   IsRequired            { get; set; } // bit

		#region Associations

		/// <summary>
		/// ProductReviewReviewTypeRel_ReviewType_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ReviewTypeID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProductReviewReviewTypeMapping> ProductReviewReviewTypeRels { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="RewardPointsHistory")]
	public partial class RewardPointsHistory
	{
		[Column(),                   PrimaryKey,  Identity] public int       Id              { get; set; } // int
		[Column(),                   NotNull              ] public int       CustomerId      { get; set; } // int
		[Column(),                   NotNull              ] public int       StoreId         { get; set; } // int
		[Column(),                   NotNull              ] public int       Points          { get; set; } // int
		[Column(),                      Nullable          ] public int?      PointsBalance   { get; set; } // int
		[Column(),                   NotNull              ] public decimal   UsedAmount      { get; set; } // decimal(18, 4)
		[Column(),                      Nullable          ] public string    Message         { get; set; } // nvarchar(max)
		[Column(),                   NotNull              ] public DateTime  CreatedOnUtc    { get; set; } // datetime2(7)
		[Column("UsedWithOrder_Id"),    Nullable          ] public int?      UsedWithOrderId { get; set; } // int
		[Column(),                      Nullable          ] public DateTime? EndDateUtc      { get; set; } // datetime2(7)
		[Column(),                      Nullable          ] public int?      ValidPoints     { get; set; } // int
		[Column(),                      Nullable          ] public Guid?     UsedWithOrder   { get; set; } // uniqueidentifier

		#region Associations

		/// <summary>
		/// RewardPointsHistory_Customer
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="RewardPointsHistory_Customer", BackReferenceName="RewardPointsHistories")]
		public Customer Customer { get; set; }

		/// <summary>
		/// RewardPointsHistory_UsedWithOrder
		/// </summary>
		[Association(ThisKey="UsedWithOrderId", OtherKey="Id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="RewardPointsHistory_UsedWithOrder", BackReferenceName="RewardPointsHistoryUsedWithOrders")]
		public Order RewardPointsHistoryUsedWithOrder { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="ScheduleTask")]
	public partial class ScheduleTask
	{
		[PrimaryKey, Identity   ] public int       Id             { get; set; } // int
		[Column,     NotNull    ] public string    Name           { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int       Seconds        { get; set; } // int
		[Column,     NotNull    ] public string    Type           { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool      Enabled        { get; set; } // bit
		[Column,     NotNull    ] public bool      StopOnError    { get; set; } // bit
		[Column,        Nullable] public DateTime? LastStartUtc   { get; set; } // datetime2(7)
		[Column,        Nullable] public DateTime? LastEndUtc     { get; set; } // datetime2(7)
		[Column,        Nullable] public DateTime? LastSuccessUtc { get; set; } // datetime2(7)
	}

	[Table(Schema="dbo", Name="SearchTerm")]
	public partial class SearchTerm
	{
		[PrimaryKey, Identity   ] public int    Id      { get; set; } // int
		[Column,        Nullable] public string Keyword { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int    StoreId { get; set; } // int
		[Column,     NotNull    ] public int    Count   { get; set; } // int
	}

	[Table(Schema="dbo", Name="Setting")]
	public partial class Setting
	{
		[PrimaryKey, Identity] public int    Id      { get; set; } // int
		[Column,     NotNull ] public string Name    { get; set; } // nvarchar(200)
		[Column,     NotNull ] public string Value   { get; set; } // nvarchar(max)
		[Column,     NotNull ] public int    StoreId { get; set; } // int
	}

	[Table(Schema="dbo", Name="Shipment")]
	public partial class Shipment
	{
		[PrimaryKey, Identity   ] public int       Id                        { get; set; } // int
		[Column,     NotNull    ] public int       OrderId                   { get; set; } // int
		[Column,        Nullable] public string    TrackingNumber            { get; set; } // nvarchar(max)
		[Column,        Nullable] public decimal?  TotalWeight               { get; set; } // decimal(18, 4)
		[Column,        Nullable] public DateTime? ShippedDateUtc            { get; set; } // datetime2(7)
		[Column,        Nullable] public DateTime? DeliveryDateUtc           { get; set; } // datetime2(7)
		[Column,        Nullable] public string    AdminComment              { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public DateTime  CreatedOnUtc              { get; set; } // datetime2(7)
		[Column,     NotNull    ] public int       ShippedDateModifiedCount  { get; set; } // int
		[Column,     NotNull    ] public int       DeliveryDateModifiedCount { get; set; } // int

		#region Associations

		/// <summary>
		/// Shipment_Order
		/// </summary>
		[Association(ThisKey="OrderId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Shipment_Order", BackReferenceName="Shipments")]
		public Order Order { get; set; }

		/// <summary>
		/// ShipmentItem_Shipment_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ShipmentId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ShipmentItem> ShipmentItems { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="ShipmentItem")]
	public partial class ShipmentItem
	{
		[PrimaryKey, Identity] public int Id          { get; set; } // int
		[Column,     NotNull ] public int ShipmentId  { get; set; } // int
		[Column,     NotNull ] public int OrderItemId { get; set; } // int
		[Column,     NotNull ] public int Quantity    { get; set; } // int
		[Column,     NotNull ] public int WarehouseId { get; set; } // int

		#region Associations

		/// <summary>
		/// ShipmentItem_Shipment
		/// </summary>
		[Association(ThisKey="ShipmentId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ShipmentItem_Shipment", BackReferenceName="ShipmentItems")]
		public Shipment Shipment { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="ShippingByWeightByTotalRecord")]
	public partial class ShippingByWeightByTotalRecord
	{
		[PrimaryKey, Identity   ] public int     Id                       { get; set; } // int
		[Column,     NotNull    ] public int     StoreId                  { get; set; } // int
		[Column,     NotNull    ] public int     WarehouseId              { get; set; } // int
		[Column,     NotNull    ] public int     CountryId                { get; set; } // int
		[Column,     NotNull    ] public int     StateProvinceId          { get; set; } // int
		[Column,        Nullable] public string  Zip                      { get; set; } // nvarchar(400)
		[Column,     NotNull    ] public int     ShippingMethodId         { get; set; } // int
		[Column,     NotNull    ] public decimal WeightFrom               { get; set; } // decimal(18, 2)
		[Column,     NotNull    ] public decimal WeightTo                 { get; set; } // decimal(18, 2)
		[Column,     NotNull    ] public decimal OrderSubtotalFrom        { get; set; } // decimal(18, 2)
		[Column,     NotNull    ] public decimal OrderSubtotalTo          { get; set; } // decimal(18, 2)
		[Column,     NotNull    ] public decimal AdditionalFixedCost      { get; set; } // decimal(18, 2)
		[Column,     NotNull    ] public decimal PercentageRateOfSubtotal { get; set; } // decimal(18, 2)
		[Column,     NotNull    ] public decimal RatePerWeightUnit        { get; set; } // decimal(18, 2)
		[Column,     NotNull    ] public decimal LowerWeightLimit         { get; set; } // decimal(18, 2)
		[Column,        Nullable] public int?    TransitDays              { get; set; } // int
	}

	[Table(Schema="dbo", Name="ShippingMethod")]
	public partial class ShippingMethod
	{
		[PrimaryKey, Identity   ] public int    Id           { get; set; } // int
		[Column,     NotNull    ] public string Name         { get; set; } // nvarchar(400)
		[Column,        Nullable] public string Description  { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int    DisplayOrder { get; set; } // int

		#region Associations

		/// <summary>
		/// ShippingMethod_RestrictedCountries_Source_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ShippingMethodId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ShippingMethodRestriction> RestrictedCountriesSources { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="ShippingMethodRestrictions")]
	public partial class ShippingMethodRestriction
	{
		[Column("ShippingMethod_Id"), PrimaryKey(1), NotNull] public int ShippingMethodId { get; set; } // int
		[Column("Country_Id"),        PrimaryKey(2), NotNull] public int CountryId        { get; set; } // int

		#region Associations

		/// <summary>
		/// ShippingMethod_RestrictedCountries_Target
		/// </summary>
		[Association(ThisKey="CountryId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ShippingMethod_RestrictedCountries_Target", BackReferenceName="ShippingMethodRestrictedCountriesTargets")]
		public Country Country { get; set; }

		/// <summary>
		/// ShippingMethod_RestrictedCountries_Source
		/// </summary>
		[Association(ThisKey="ShippingMethodId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ShippingMethod_RestrictedCountries_Source", BackReferenceName="RestrictedCountriesSources")]
		public ShippingMethod ShippingMethod { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="ShoppingCartItem")]
	public partial class ShoppingCartItem
	{
		[PrimaryKey, Identity   ] public int       Id                   { get; set; } // int
		[Column,     NotNull    ] public int       StoreId              { get; set; } // int
		[Column,     NotNull    ] public int       ShoppingCartTypeId   { get; set; } // int
		[Column,     NotNull    ] public int       CustomerId           { get; set; } // int
		[Column,     NotNull    ] public int       ProductId            { get; set; } // int
		[Column,        Nullable] public string    AttributesXml        { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public decimal   CustomerEnteredPrice { get; set; } // decimal(18, 4)
		[Column,     NotNull    ] public int       Quantity             { get; set; } // int
		[Column,        Nullable] public DateTime? RentalStartDateUtc   { get; set; } // datetime2(7)
		[Column,        Nullable] public DateTime? RentalEndDateUtc     { get; set; } // datetime2(7)
		[Column,     NotNull    ] public DateTime  CreatedOnUtc         { get; set; } // datetime2(7)
		[Column,     NotNull    ] public DateTime  UpdatedOnUtc         { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// ShoppingCartItem_Customer
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ShoppingCartItem_Customer", BackReferenceName="ShoppingCartItems")]
		public Customer Customer { get; set; }

		/// <summary>
		/// ShoppingCartItem_Product
		/// </summary>
		[Association(ThisKey="ProductId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ShoppingCartItem_Product", BackReferenceName="ShoppingCartItems")]
		public Product Product { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="ShortenUrl")]
	public partial class ShortenUrl
	{
		[PrimaryKey, Identity   ] public int    Id          { get; set; } // int
		[Column,     NotNull    ] public int    UrlRecordId { get; set; } // int
		[Column,        Nullable] public string Slug        { get; set; } // nvarchar(max)
		[Column,        Nullable] public string ShortUrl    { get; set; } // nvarchar(100)
		[Column,        Nullable] public string Hash        { get; set; } // nvarchar(max)
		[Column,        Nullable] public string GlobalHash  { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int    NewHash     { get; set; } // int
		[Column,     NotNull    ] public bool   Deleted     { get; set; } // bit
	}

	[Table(Schema="dbo", Name="SpecificationAttribute")]
	public partial class SpecificationAttribute
	{
		[PrimaryKey, Identity] public int    Id           { get; set; } // int
		[Column,     NotNull ] public string Name         { get; set; } // nvarchar(max)
		[Column,     NotNull ] public int    DisplayOrder { get; set; } // int

		#region Associations

		/// <summary>
		/// SpecificationAttributeOption_SpecificationAttribute_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="SpecificationAttributeId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<SpecificationAttributeOption> SpecificationAttributeOptions { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="SpecificationAttributeOption")]
	public partial class SpecificationAttributeOption
	{
		[PrimaryKey, Identity   ] public int    Id                       { get; set; } // int
		[Column,     NotNull    ] public int    SpecificationAttributeId { get; set; } // int
		[Column,     NotNull    ] public string Name                     { get; set; } // nvarchar(max)
		[Column,        Nullable] public string ColorSquaresRgb          { get; set; } // nvarchar(100)
		[Column,     NotNull    ] public int    DisplayOrder             { get; set; } // int

		#region Associations

		/// <summary>
		/// ProductSpecificationAttribute_SpecificationAttributeOption_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="SpecificationAttributeOptionId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProductSpecificationAttributeMapping> ProductSpecificationAttributes { get; set; }

		/// <summary>
		/// SpecificationAttributeOption_SpecificationAttribute
		/// </summary>
		[Association(ThisKey="SpecificationAttributeId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="SpecificationAttributeOption_SpecificationAttribute", BackReferenceName="SpecificationAttributeOptions")]
		public SpecificationAttribute SpecificationAttribute { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="SS_AS_AnywhereSlider")]
	public partial class SsAsAnywhereSlider
	{
		[PrimaryKey, Identity] public int    Id              { get; set; } // int
		[Column,     NotNull ] public string SystemName      { get; set; } // nvarchar(400)
		[Column,     NotNull ] public int    SliderType      { get; set; } // int
		[Column,     NotNull ] public int    LanguageId      { get; set; } // int
		[Column,     NotNull ] public bool   LimitedToStores { get; set; } // bit

		#region Associations

		/// <summary>
		/// FK_SS_AS_SliderImage_SS_AS_AnywhereSlider_SliderId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="SliderId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<SsAsSliderImage> SSASSliderImageSSASAnywhereSliderSliderIds { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="SS_AS_SliderImage")]
	public partial class SsAsSliderImage
	{
		[PrimaryKey, Identity   ] public int    Id           { get; set; } // int
		[Column,        Nullable] public string DisplayText  { get; set; } // nvarchar(max)
		[Column,        Nullable] public string Url          { get; set; } // nvarchar(max)
		[Column,        Nullable] public string Alt          { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool   Visible      { get; set; } // bit
		[Column,     NotNull    ] public int    DisplayOrder { get; set; } // int
		[Column,     NotNull    ] public int    PictureId    { get; set; } // int
		[Column,     NotNull    ] public int    SliderId     { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_SS_AS_SliderImage_SS_AS_AnywhereSlider_SliderId
		/// </summary>
		[Association(ThisKey="SliderId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_SS_AS_SliderImage_SS_AS_AnywhereSlider_SliderId", BackReferenceName="SSASSliderImageSSASAnywhereSliderSliderIds")]
		public SsAsAnywhereSlider Slider { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="SS_C_Condition")]
	public partial class SsCCondition
	{
		[PrimaryKey, Identity   ] public int    Id     { get; set; } // int
		[Column,        Nullable] public string Name   { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool   Active { get; set; } // bit

		#region Associations

		/// <summary>
		/// ConditionGroup_ConditionEntity_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ConditionId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<SsCConditionGroup> ConditionGroupConditionEntities { get; set; }

		/// <summary>
		/// CustomerOverride_ConditionEntity_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ConditionId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<SsCCustomerOverride> CustomerOverrideConditionEntities { get; set; }

		/// <summary>
		/// EntityCondition_ConditionEntity_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ConditionId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<SsCEntityCondition> EntityConditionConditionEntities { get; set; }

		/// <summary>
		/// ProductOverride_ConditionEntity_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ConditionId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<SsCProductOverride> ProductOverrideConditionEntities { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="SS_C_ConditionGroup")]
	public partial class SsCConditionGroup
	{
		[PrimaryKey, Identity] public int Id          { get; set; } // int
		[Column,     NotNull ] public int ConditionId { get; set; } // int

		#region Associations

		/// <summary>
		/// ConditionGroup_ConditionEntity
		/// </summary>
		[Association(ThisKey="ConditionId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ConditionGroup_ConditionEntity", BackReferenceName="ConditionGroupConditionEntities")]
		public SsCCondition Condition { get; set; }

		/// <summary>
		/// ConditionStatement_ConditionGroupEntity_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ConditionGroupId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<SsCConditionStatement> ConditionStatementConditionGroupEntities { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="SS_C_ConditionStatement")]
	public partial class SsCConditionStatement
	{
		[PrimaryKey, Identity   ] public int    Id                { get; set; } // int
		[Column,     NotNull    ] public int    ConditionType     { get; set; } // int
		[Column,     NotNull    ] public int    ConditionProperty { get; set; } // int
		[Column,     NotNull    ] public int    OperatorType      { get; set; } // int
		[Column,        Nullable] public string Value             { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int    ConditionGroupId  { get; set; } // int

		#region Associations

		/// <summary>
		/// ConditionStatement_ConditionGroupEntity
		/// </summary>
		[Association(ThisKey="ConditionGroupId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ConditionStatement_ConditionGroupEntity", BackReferenceName="ConditionStatementConditionGroupEntities")]
		public SsCConditionGroup ConditionGroup { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="SS_C_CustomerOverride")]
	public partial class SsCCustomerOverride
	{
		[PrimaryKey, Identity] public int Id            { get; set; } // int
		[Column,     NotNull ] public int ConditionId   { get; set; } // int
		[Column,     NotNull ] public int CustomerId    { get; set; } // int
		[Column,     NotNull ] public int OverrideState { get; set; } // int

		#region Associations

		/// <summary>
		/// CustomerOverride_ConditionEntity
		/// </summary>
		[Association(ThisKey="ConditionId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="CustomerOverride_ConditionEntity", BackReferenceName="CustomerOverrideConditionEntities")]
		public SsCCondition Condition { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="SS_C_EntityCondition")]
	public partial class SsCEntityCondition
	{
		[PrimaryKey, Identity] public int  Id              { get; set; } // int
		[Column,     NotNull ] public int  ConditionId     { get; set; } // int
		[Column,     NotNull ] public int  EntityType      { get; set; } // int
		[Column,     NotNull ] public int  EntityId        { get; set; } // int
		[Column,     NotNull ] public bool LimitedToStores { get; set; } // bit

		#region Associations

		/// <summary>
		/// EntityCondition_ConditionEntity
		/// </summary>
		[Association(ThisKey="ConditionId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="EntityCondition_ConditionEntity", BackReferenceName="EntityConditionConditionEntities")]
		public SsCCondition Condition { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="SS_C_ProductOverride")]
	public partial class SsCProductOverride
	{
		[PrimaryKey, Identity] public int Id           { get; set; } // int
		[Column,     NotNull ] public int ConditionId  { get; set; } // int
		[Column,     NotNull ] public int ProductId    { get; set; } // int
		[Column,     NotNull ] public int ProductState { get; set; } // int

		#region Associations

		/// <summary>
		/// ProductOverride_ConditionEntity
		/// </summary>
		[Association(ThisKey="ConditionId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="ProductOverride_ConditionEntity", BackReferenceName="ProductOverrideConditionEntities")]
		public SsCCondition Condition { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="SS_ES_EntitySetting")]
	public partial class SsEsEntitySetting
	{
		[PrimaryKey, Identity   ] public int    Id         { get; set; } // int
		[Column,     NotNull    ] public int    EntityType { get; set; } // int
		[Column,     NotNull    ] public int    EntityId   { get; set; } // int
		[Column,        Nullable] public string Key        { get; set; } // nvarchar(max)
		[Column,        Nullable] public string Value      { get; set; } // nvarchar(max)
	}

	[Table(Schema="dbo", Name="SS_JC_JCarousel")]
	public partial class SsJcJCarousel
	{
		[PrimaryKey, Identity   ] public int    Id                 { get; set; } // int
		[Column,     NotNull    ] public string Name               { get; set; } // nvarchar(200)
		[Column,        Nullable] public string Title              { get; set; } // nvarchar(250)
		[Column,        Nullable] public string DataSourceType     { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int    DataSourceEntityId { get; set; } // int
		[Column,     NotNull    ] public int    CarouselType       { get; set; } // int
		[Column,     NotNull    ] public bool   LimitedToStores    { get; set; } // bit
	}

	[Table(Schema="dbo", Name="SS_MAP_EntityMapping")]
	public partial class SsMapEntityMapping
	{
		[PrimaryKey, Identity] public int Id             { get; set; } // int
		[Column,     NotNull ] public int EntityType     { get; set; } // int
		[Column,     NotNull ] public int EntityId       { get; set; } // int
		[Column,     NotNull ] public int MappedEntityId { get; set; } // int
		[Column,     NotNull ] public int DisplayOrder   { get; set; } // int
		[Column,     NotNull ] public int MappingType    { get; set; } // int
	}

	[Table(Schema="dbo", Name="SS_MAP_EntityWidgetMapping")]
	public partial class SsMapEntityWidgetMapping
	{
		[PrimaryKey, Identity   ] public int    Id           { get; set; } // int
		[Column,     NotNull    ] public int    EntityType   { get; set; } // int
		[Column,     NotNull    ] public int    EntityId     { get; set; } // int
		[Column,        Nullable] public string WidgetZone   { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int    DisplayOrder { get; set; } // int
	}

	[Table(Schema="dbo", Name="SS_MM_Menu")]
	public partial class SsMmMenu
	{
		[PrimaryKey, Identity   ] public int    Id                   { get; set; } // int
		[Column,     NotNull    ] public bool   Enabled              { get; set; } // bit
		[Column,        Nullable] public string Name                 { get; set; } // nvarchar(max)
		[Column,        Nullable] public string CssClass             { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool   ShowDropdownsOnClick { get; set; } // bit
		[Column,     NotNull    ] public bool   LimitedToStores      { get; set; } // bit

		#region Associations

		/// <summary>
		/// FK_SS_MM_MenuItem_SS_MM_Menu_MenuId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="MenuId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<SsMmMenuItem> SSMMMenuItemSSMMMenuMenuIds { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="SS_MM_MenuItem")]
	public partial class SsMmMenuItem
	{
		[PrimaryKey, Identity   ] public int     Id                      { get; set; } // int
		[Column,     NotNull    ] public int     Type                    { get; set; } // int
		[Column,        Nullable] public string  Title                   { get; set; } // nvarchar(max)
		[Column,        Nullable] public string  Url                     { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool    OpenInNewWindow         { get; set; } // bit
		[Column,     NotNull    ] public int     DisplayOrder            { get; set; } // int
		[Column,        Nullable] public string  CssClass                { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int     MaximumNumberOfEntities { get; set; } // int
		[Column,     NotNull    ] public int     NumberOfBoxesPerRow     { get; set; } // int
		[Column,     NotNull    ] public int     CatalogTemplate         { get; set; } // int
		[Column,     NotNull    ] public int     ImageSize               { get; set; } // int
		[Column,     NotNull    ] public int     EntityId                { get; set; } // int
		[Column,        Nullable] public string  WidgetZone              { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public decimal Width                   { get; set; } // decimal(18, 2)
		[Column,     NotNull    ] public int     ParentMenuItemId        { get; set; } // int
		[Column,        Nullable] public int?    MenuId                  { get; set; } // int
		[Column,     NotNull    ] public bool    SubjectToAcl            { get; set; } // bit

		#region Associations

		/// <summary>
		/// FK_SS_MM_MenuItem_SS_MM_Menu_MenuId
		/// </summary>
		[Association(ThisKey="MenuId", OtherKey="Id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_SS_MM_MenuItem_SS_MM_Menu_MenuId", BackReferenceName="SSMMMenuItemSSMMMenuMenuIds")]
		public SsMmMenu Menu { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="SS_PR_CategoryPageRibbon")]
	public partial class SsPrCategoryPageRibbon
	{
		[PrimaryKey, Identity   ] public int    Id              { get; set; } // int
		[Column,     NotNull    ] public int    ProductRibbonId { get; set; } // int
		[Column,        Nullable] public int?   PictureId       { get; set; } // int
		[Column,     NotNull    ] public bool   Enabled         { get; set; } // bit
		[Column,        Nullable] public string Text            { get; set; } // nvarchar(max)
		[Column,        Nullable] public string Position        { get; set; } // nvarchar(max)
		[Column,        Nullable] public string TextStyle       { get; set; } // nvarchar(max)
		[Column,        Nullable] public string ImageStyle      { get; set; } // nvarchar(max)
		[Column,        Nullable] public string ContainerStyle  { get; set; } // nvarchar(max)

		#region Associations

		/// <summary>
		/// FK_SS_PR_CategoryPageRibbon_SS_PR_RibbonPicture_PictureId
		/// </summary>
		[Association(ThisKey="PictureId", OtherKey="Id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_SS_PR_CategoryPageRibbon_SS_PR_RibbonPicture_PictureId", BackReferenceName="SSPRCategoryPageRibbonSSPRRibbonPicturePictureIds")]
		public SsPrRibbonPicture Picture { get; set; }

		/// <summary>
		/// FK_SS_PR_CategoryPageRibbon_SS_PR_ProductRibbon_ProductRibbonId
		/// </summary>
		[Association(ThisKey="ProductRibbonId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_SS_PR_CategoryPageRibbon_SS_PR_ProductRibbon_ProductRibbonId", BackReferenceName="SSPRCategoryPageRibbonSSPRProductRibbonProductRibbonIds")]
		public SsPrProductRibbon ProductRibbon { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="SS_PR_ProductPageRibbon")]
	public partial class SsPrProductPageRibbon
	{
		[PrimaryKey, Identity   ] public int    Id              { get; set; } // int
		[Column,     NotNull    ] public int    ProductRibbonId { get; set; } // int
		[Column,        Nullable] public int?   PictureId       { get; set; } // int
		[Column,     NotNull    ] public bool   Enabled         { get; set; } // bit
		[Column,        Nullable] public string Text            { get; set; } // nvarchar(max)
		[Column,        Nullable] public string Position        { get; set; } // nvarchar(max)
		[Column,        Nullable] public string TextStyle       { get; set; } // nvarchar(max)
		[Column,        Nullable] public string ImageStyle      { get; set; } // nvarchar(max)
		[Column,        Nullable] public string ContainerStyle  { get; set; } // nvarchar(max)

		#region Associations

		/// <summary>
		/// FK_SS_PR_ProductPageRibbon_SS_PR_RibbonPicture_PictureId
		/// </summary>
		[Association(ThisKey="PictureId", OtherKey="Id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_SS_PR_ProductPageRibbon_SS_PR_RibbonPicture_PictureId", BackReferenceName="SSPRProductPageRibbonSSPRRibbonPicturePictureIds")]
		public SsPrRibbonPicture Picture { get; set; }

		/// <summary>
		/// FK_SS_PR_ProductPageRibbon_SS_PR_ProductRibbon_ProductRibbonId
		/// </summary>
		[Association(ThisKey="ProductRibbonId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_SS_PR_ProductPageRibbon_SS_PR_ProductRibbon_ProductRibbonId", BackReferenceName="SSPRProductPageRibbonSSPRProductRibbonProductRibbonIds")]
		public SsPrProductRibbon ProductRibbon { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="SS_PR_ProductRibbon")]
	public partial class SsPrProductRibbon
	{
		[PrimaryKey, Identity   ] public int       Id                                    { get; set; } // int
		[Column,     NotNull    ] public bool      Enabled                               { get; set; } // bit
		[Column,        Nullable] public string    Name                                  { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool      StopAddingRibbonsAftherThisOneIsAdded { get; set; } // bit
		[Column,     NotNull    ] public int       Priority                              { get; set; } // int
		[Column,        Nullable] public DateTime? FromDate                              { get; set; } // datetime2(7)
		[Column,        Nullable] public DateTime? ToDate                                { get; set; } // datetime2(7)
		[Column,     NotNull    ] public bool      LimitedToStores                       { get; set; } // bit

		#region Associations

		/// <summary>
		/// FK_SS_PR_CategoryPageRibbon_SS_PR_ProductRibbon_ProductRibbonId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductRibbonId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<SsPrCategoryPageRibbon> SSPRCategoryPageRibbonSSPRProductRibbonProductRibbonIds { get; set; }

		/// <summary>
		/// FK_SS_PR_ProductPageRibbon_SS_PR_ProductRibbon_ProductRibbonId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductRibbonId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<SsPrProductPageRibbon> SSPRProductPageRibbonSSPRProductRibbonProductRibbonIds { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="SS_PR_RibbonPicture")]
	public partial class SsPrRibbonPicture
	{
		[PrimaryKey, Identity] public int Id        { get; set; } // int
		[Column,     NotNull ] public int PictureId { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_SS_PR_CategoryPageRibbon_SS_PR_RibbonPicture_PictureId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="PictureId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<SsPrCategoryPageRibbon> SSPRCategoryPageRibbonSSPRRibbonPicturePictureIds { get; set; }

		/// <summary>
		/// FK_SS_PR_ProductPageRibbon_SS_PR_RibbonPicture_PictureId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="PictureId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<SsPrProductPageRibbon> SSPRProductPageRibbonSSPRRibbonPicturePictureIds { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="SS_QT_Tab")]
	public partial class SsQtTab
	{
		[PrimaryKey, Identity   ] public int    Id              { get; set; } // int
		[Column,     NotNull    ] public string SystemName      { get; set; } // nvarchar(400)
		[Column,        Nullable] public string DisplayName     { get; set; } // nvarchar(400)
		[Column,        Nullable] public string Description     { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool   LimitedToStores { get; set; } // bit
		[Column,     NotNull    ] public int    TabMode         { get; set; } // int
		[Column,     NotNull    ] public int    DisplayOrder    { get; set; } // int
	}

	[Table(Schema="dbo", Name="SS_RB_Category")]
	public partial class SsRbCategory
	{
		[PrimaryKey, Identity   ] public int    Id              { get; set; } // int
		[Column,     NotNull    ] public int    LanguageId      { get; set; } // int
		[Column,     NotNull    ] public string Name            { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int    DisplayOrder    { get; set; } // int
		[Column,     NotNull    ] public bool   Published       { get; set; } // bit
		[Column,        Nullable] public string SEOTitle        { get; set; } // nvarchar(max)
		[Column,        Nullable] public string SEODescription  { get; set; } // nvarchar(max)
		[Column,        Nullable] public string SEOKeywords     { get; set; } // nvarchar(max)
		[Column,        Nullable] public string SEName          { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool   LimitedToStores { get; set; } // bit
	}

	[Table(Schema="dbo", Name="SS_RB_Post")]
	public partial class SsRbPost
	{
		[PrimaryKey, Identity] public int Id                { get; set; } // int
		[Column,     NotNull ] public int HomePagePictureId { get; set; } // int
		[Column,     NotNull ] public int PictureId         { get; set; } // int
		[Column,     NotNull ] public int BlogPostId        { get; set; } // int
	}

	[Table(Schema="dbo", Name="SS_RB_RelatedBlog")]
	public partial class SsRbRelatedBlog
	{
		[PrimaryKey, Identity] public int Id                { get; set; } // int
		[Column,     NotNull ] public int BlogPostId        { get; set; } // int
		[Column,     NotNull ] public int RelatedBlogPostId { get; set; } // int
		[Column,     NotNull ] public int DisplayOrder      { get; set; } // int
	}

	[Table(Schema="dbo", Name="SS_RB_RichBlogPostCategoryMapping")]
	public partial class SsRbRichBlogPostCategoryMapping
	{
		[PrimaryKey, Identity] public int  Id              { get; set; } // int
		[Column,     NotNull ] public int  BlogPostId      { get; set; } // int
		[Column,     NotNull ] public int  CategoryId      { get; set; } // int
		[Column,     NotNull ] public bool LimitedToStores { get; set; } // bit
	}

	[Table(Schema="dbo", Name="SS_SOTD_SaleOfTheDayOffer")]
	public partial class SsSotdSaleOfTheDayOffer
	{
		[PrimaryKey, Identity   ] public int    Id              { get; set; } // int
		[Column,     NotNull    ] public bool   Published       { get; set; } // bit
		[Column,        Nullable] public string Title           { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool   LimitedToStores { get; set; } // bit
	}

	[Table(Schema="dbo", Name="SS_SPC_ProductsGroup")]
	public partial class SsSpcProductsGroup
	{
		[PrimaryKey, Identity   ] public int    Id                      { get; set; } // int
		[Column,     NotNull    ] public bool   Published               { get; set; } // bit
		[Column,        Nullable] public string Title                   { get; set; } // nvarchar(max)
		[Column,        Nullable] public string WidgetZone              { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int    Store                   { get; set; } // int
		[Column,     NotNull    ] public int    NumberOfProductsPerItem { get; set; } // int
		[Column,     NotNull    ] public int    DisplayOrder            { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_SS_SPC_ProductsGroupItem_SS_SPC_ProductsGroup_GroupId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="GroupId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<SsSpcProductsGroupItem> SSSPCProductsGroupItemSSSPCProductsGroupGroupIds { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="SS_SPC_ProductsGroupItem")]
	public partial class SsSpcProductsGroupItem
	{
		[PrimaryKey, Identity   ] public int    Id           { get; set; } // int
		[Column,     NotNull    ] public bool   Active       { get; set; } // bit
		[Column,        Nullable] public string Title        { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int    SourceType   { get; set; } // int
		[Column,     NotNull    ] public int    EntityId     { get; set; } // int
		[Column,     NotNull    ] public int    SortMethod   { get; set; } // int
		[Column,     NotNull    ] public int    DisplayOrder { get; set; } // int
		[Column,     NotNull    ] public int    GroupId      { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_SS_SPC_ProductsGroupItem_SS_SPC_ProductsGroup_GroupId
		/// </summary>
		[Association(ThisKey="GroupId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_SS_SPC_ProductsGroupItem_SS_SPC_ProductsGroup_GroupId", BackReferenceName="SSSPCProductsGroupItemSSSPCProductsGroupGroupIds")]
		public SsSpcProductsGroup Group { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="SS_S_Schedule")]
	public partial class SsSSchedule
	{
		[PrimaryKey, Identity   ] public int       Id                      { get; set; } // int
		[Column,     NotNull    ] public int       EntityType              { get; set; } // int
		[Column,     NotNull    ] public int       EntityId                { get; set; } // int
		[Column,        Nullable] public DateTime? EntityFromDate          { get; set; } // datetime
		[Column,        Nullable] public DateTime? EntityToDate            { get; set; } // datetime
		[Column,     NotNull    ] public int       SchedulePatternType     { get; set; } // int
		[Column,        Nullable] public TimeSpan? SchedulePatternFromTime { get; set; } // time(7)
		[Column,        Nullable] public TimeSpan? SchedulePatternToTime   { get; set; } // time(7)
		[Column,        Nullable] public int?      ExactDayValue           { get; set; } // int
		[Column,        Nullable] public int?      EveryMonthFromDayValue  { get; set; } // int
		[Column,        Nullable] public int?      EveryMonthToDayValue    { get; set; } // int
	}

	[Table(Schema="dbo", Name="StateProvince")]
	public partial class StateProvince
	{
		[PrimaryKey, Identity   ] public int    Id           { get; set; } // int
		[Column,     NotNull    ] public int    CountryId    { get; set; } // int
		[Column,     NotNull    ] public string Name         { get; set; } // nvarchar(100)
		[Column,        Nullable] public string Abbreviation { get; set; } // nvarchar(100)
		[Column,     NotNull    ] public bool   Published    { get; set; } // bit
		[Column,     NotNull    ] public int    DisplayOrder { get; set; } // int

		#region Associations

		/// <summary>
		/// Address_StateProvince_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="StateProvinceId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Address> Addresses { get; set; }

		/// <summary>
		/// StateProvince_Country
		/// </summary>
		[Association(ThisKey="CountryId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="StateProvince_Country", BackReferenceName="StateProvinces")]
		public Country Country { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="StockQuantityHistory")]
	public partial class StockQuantityHistory
	{
		[PrimaryKey, Identity   ] public int      Id                 { get; set; } // int
		[Column,     NotNull    ] public int      QuantityAdjustment { get; set; } // int
		[Column,     NotNull    ] public int      StockQuantity      { get; set; } // int
		[Column,        Nullable] public string   Message            { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public DateTime CreatedOnUtc       { get; set; } // datetime2(7)
		[Column,     NotNull    ] public int      ProductId          { get; set; } // int
		[Column,        Nullable] public int?     CombinationId      { get; set; } // int
		[Column,        Nullable] public int?     WarehouseId        { get; set; } // int

		#region Associations

		/// <summary>
		/// StockQuantityHistory_Product
		/// </summary>
		[Association(ThisKey="ProductId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="StockQuantityHistory_Product", BackReferenceName="StockQuantityHistories")]
		public Product Product { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Store")]
	public partial class Store
	{
		[PrimaryKey, Identity   ] public int    Id                 { get; set; } // int
		[Column,     NotNull    ] public string Name               { get; set; } // nvarchar(400)
		[Column,     NotNull    ] public string Url                { get; set; } // nvarchar(400)
		[Column,     NotNull    ] public bool   SslEnabled         { get; set; } // bit
		[Column,        Nullable] public string Hosts              { get; set; } // nvarchar(1000)
		[Column,     NotNull    ] public int    DefaultLanguageId  { get; set; } // int
		[Column,     NotNull    ] public int    DisplayOrder       { get; set; } // int
		[Column,        Nullable] public string CompanyName        { get; set; } // nvarchar(1000)
		[Column,        Nullable] public string CompanyAddress     { get; set; } // nvarchar(1000)
		[Column,        Nullable] public string CompanyPhoneNumber { get; set; } // nvarchar(1000)
		[Column,        Nullable] public string CompanyVat         { get; set; } // nvarchar(1000)

		#region Associations

		/// <summary>
		/// BlogComment_Store_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="StoreId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<BlogComment> BlogComments { get; set; }

		/// <summary>
		/// NewsComment_Store_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="StoreId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<NewsComment> NewsComments { get; set; }

		/// <summary>
		/// ProductReview_Store_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="StoreId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProductReview> ProductReviews { get; set; }

		/// <summary>
		/// StoreMapping_Store_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="StoreId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<StoreMapping> StoreMappings { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="StoreMapping")]
	public partial class StoreMapping
	{
		[PrimaryKey, Identity] public int    Id         { get; set; } // int
		[Column,     NotNull ] public int    EntityId   { get; set; } // int
		[Column,     NotNull ] public string EntityName { get; set; } // nvarchar(400)
		[Column,     NotNull ] public int    StoreId    { get; set; } // int

		#region Associations

		/// <summary>
		/// StoreMapping_Store
		/// </summary>
		[Association(ThisKey="StoreId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="StoreMapping_Store", BackReferenceName="StoreMappings")]
		public Store Store { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="TaxCategory")]
	public partial class TaxCategory
	{
		[PrimaryKey, Identity] public int    Id           { get; set; } // int
		[Column,     NotNull ] public string Name         { get; set; } // nvarchar(400)
		[Column,     NotNull ] public int    DisplayOrder { get; set; } // int
	}

	[Table(Schema="dbo", Name="TaxRate")]
	public partial class TaxRate
	{
		[PrimaryKey, Identity   ] public int     Id              { get; set; } // int
		[Column,     NotNull    ] public int     StoreId         { get; set; } // int
		[Column,     NotNull    ] public int     TaxCategoryId   { get; set; } // int
		[Column,     NotNull    ] public int     CountryId       { get; set; } // int
		[Column,     NotNull    ] public int     StateProvinceId { get; set; } // int
		[Column,        Nullable] public string  Zip             { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public decimal Percentage      { get; set; } // decimal(18, 4)
	}

	[Table(Schema="dbo", Name="Test")]
	public partial class Test
	{
		[Column, Nullable] public int?   Id   { get; set; } // int
		[Column, Nullable] public string Text { get; set; } // nvarchar(20)
	}

	[Table(Schema="dbo", Name="TestIdentity")]
	public partial class TestIdentity
	{
		[PrimaryKey, Identity] public int    Id     { get; set; } // int
		[Column,     Nullable] public string Text   { get; set; } // nvarchar(20)
		[Column,     Nullable] public string Remark { get; set; } // nvarchar(20)
	}

	[Table(Schema="dbo", Name="TierPrice")]
	public partial class TierPrice
	{
		[PrimaryKey, Identity   ] public int       Id               { get; set; } // int
		[Column,     NotNull    ] public int       ProductId        { get; set; } // int
		[Column,     NotNull    ] public int       StoreId          { get; set; } // int
		[Column,        Nullable] public int?      CustomerRoleId   { get; set; } // int
		[Column,     NotNull    ] public int       Quantity         { get; set; } // int
		[Column,     NotNull    ] public decimal   Price            { get; set; } // decimal(18, 4)
		[Column,        Nullable] public DateTime? StartDateTimeUtc { get; set; } // datetime2(7)
		[Column,        Nullable] public DateTime? EndDateTimeUtc   { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// TierPrice_CustomerRole
		/// </summary>
		[Association(ThisKey="CustomerRoleId", OtherKey="Id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="TierPrice_CustomerRole", BackReferenceName="TierPrices")]
		public CustomerRole CustomerRole { get; set; }

		/// <summary>
		/// TierPrice_Product
		/// </summary>
		[Association(ThisKey="ProductId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="TierPrice_Product", BackReferenceName="TierPrices")]
		public Product Product { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Topic")]
	public partial class Topic
	{
		[PrimaryKey, Identity   ] public int    Id                        { get; set; } // int
		[Column,        Nullable] public string SystemName                { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool   IncludeInSitemap          { get; set; } // bit
		[Column,     NotNull    ] public bool   IncludeInTopMenu          { get; set; } // bit
		[Column,     NotNull    ] public bool   IncludeInFooterColumn1    { get; set; } // bit
		[Column,     NotNull    ] public bool   IncludeInFooterColumn2    { get; set; } // bit
		[Column,     NotNull    ] public bool   IncludeInFooterColumn3    { get; set; } // bit
		[Column,     NotNull    ] public int    DisplayOrder              { get; set; } // int
		[Column,     NotNull    ] public bool   AccessibleWhenStoreClosed { get; set; } // bit
		[Column,     NotNull    ] public bool   IsPasswordProtected       { get; set; } // bit
		[Column,        Nullable] public string Password                  { get; set; } // nvarchar(max)
		[Column,        Nullable] public string Title                     { get; set; } // nvarchar(max)
		[Column,        Nullable] public string Body                      { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool   Published                 { get; set; } // bit
		[Column,     NotNull    ] public int    TopicTemplateId           { get; set; } // int
		[Column,        Nullable] public string MetaKeywords              { get; set; } // nvarchar(max)
		[Column,        Nullable] public string MetaDescription           { get; set; } // nvarchar(max)
		[Column,        Nullable] public string MetaTitle                 { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool   SubjectToAcl              { get; set; } // bit
		[Column,     NotNull    ] public bool   LimitedToStores           { get; set; } // bit
	}

	[Table(Schema="dbo", Name="TopicTemplate")]
	public partial class TopicTemplate
	{
		[PrimaryKey, Identity] public int    Id           { get; set; } // int
		[Column,     NotNull ] public string Name         { get; set; } // nvarchar(400)
		[Column,     NotNull ] public string ViewPath     { get; set; } // nvarchar(400)
		[Column,     NotNull ] public int    DisplayOrder { get; set; } // int
	}

	[Table(Schema="dbo", Name="UrlRecord")]
	public partial class UrlRecord
	{
		[PrimaryKey, Identity] public int    Id         { get; set; } // int
		[Column,     NotNull ] public int    EntityId   { get; set; } // int
		[Column,     NotNull ] public string EntityName { get; set; } // nvarchar(400)
		[Column,     NotNull ] public string Slug       { get; set; } // nvarchar(400)
		[Column,     NotNull ] public bool   IsActive   { get; set; } // bit
		[Column,     NotNull ] public int    LanguageId { get; set; } // int
	}

	[Table(Schema="dbo", Name="Vendor")]
	public partial class Vendor
	{
		[PrimaryKey, Identity   ] public int    Id                             { get; set; } // int
		[Column,     NotNull    ] public string Name                           { get; set; } // nvarchar(400)
		[Column,        Nullable] public string Email                          { get; set; } // nvarchar(400)
		[Column,        Nullable] public string Description                    { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int    PictureId                      { get; set; } // int
		[Column,     NotNull    ] public int    AddressId                      { get; set; } // int
		[Column,        Nullable] public string AdminComment                   { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public bool   Active                         { get; set; } // bit
		[Column,     NotNull    ] public bool   Deleted                        { get; set; } // bit
		[Column,     NotNull    ] public int    DisplayOrder                   { get; set; } // int
		[Column,        Nullable] public string MetaKeywords                   { get; set; } // nvarchar(400)
		[Column,        Nullable] public string MetaDescription                { get; set; } // nvarchar(max)
		[Column,        Nullable] public string MetaTitle                      { get; set; } // nvarchar(400)
		[Column,     NotNull    ] public int    PageSize                       { get; set; } // int
		[Column,     NotNull    ] public bool   AllowCustomersToSelectPageSize { get; set; } // bit
		[Column,        Nullable] public string PageSizeOptions                { get; set; } // nvarchar(200)

		#region Associations

		/// <summary>
		/// VendorNote_Vendor_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="VendorId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<VendorNote> VendorNotes { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="VendorAttribute")]
	public partial class VendorAttribute
	{
		[PrimaryKey, Identity] public int    Id                     { get; set; } // int
		[Column,     NotNull ] public string Name                   { get; set; } // nvarchar(400)
		[Column,     NotNull ] public bool   IsRequired             { get; set; } // bit
		[Column,     NotNull ] public int    AttributeControlTypeId { get; set; } // int
		[Column,     NotNull ] public int    DisplayOrder           { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_VendorAttributeValue_VendorAttribute_VendorAttributeId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="VendorAttributeId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<VendorAttributeValue> VendorAttributeValueVendorAttributeIds { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="VendorAttributeValue")]
	public partial class VendorAttributeValue
	{
		[PrimaryKey, Identity] public int    Id                { get; set; } // int
		[Column,     NotNull ] public int    VendorAttributeId { get; set; } // int
		[Column,     NotNull ] public string Name              { get; set; } // nvarchar(400)
		[Column,     NotNull ] public bool   IsPreSelected     { get; set; } // bit
		[Column,     NotNull ] public int    DisplayOrder      { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_VendorAttributeValue_VendorAttribute_VendorAttributeId
		/// </summary>
		[Association(ThisKey="VendorAttributeId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_VendorAttributeValue_VendorAttribute_VendorAttributeId", BackReferenceName="VendorAttributeValueVendorAttributeIds")]
		public VendorAttribute VendorAttribute { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="VendorNote")]
	public partial class VendorNote
	{
		[PrimaryKey, Identity] public int      Id           { get; set; } // int
		[Column,     NotNull ] public int      VendorId     { get; set; } // int
		[Column,     NotNull ] public string   Note         { get; set; } // nvarchar(max)
		[Column,     NotNull ] public DateTime CreatedOnUtc { get; set; } // datetime2(7)

		#region Associations

		/// <summary>
		/// VendorNote_Vendor
		/// </summary>
		[Association(ThisKey="VendorId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="VendorNote_Vendor", BackReferenceName="VendorNotes")]
		public Vendor Vendor { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Warehouse")]
	public partial class Warehouse
	{
		[PrimaryKey, Identity   ] public int    Id           { get; set; } // int
		[Column,     NotNull    ] public string Name         { get; set; } // nvarchar(400)
		[Column,        Nullable] public string AdminComment { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public int    AddressId    { get; set; } // int

		#region Associations

		/// <summary>
		/// ProductWarehouseInventory_Warehouse_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="WarehouseId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProductWarehouseInventory> ProductWarehouseInventories { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="WidgetsList")]
	public partial class WidgetsList
	{
		[PrimaryKey, Identity] public int    Id         { get; set; } // int
		[Column,     Nullable] public string WidgetZone { get; set; } // nvarchar(max)
	}

	public static partial class TstMallDBDBStoredProcedures
	{
		#region FullTextDisable

		public static int FullTextDisable(this TstMallDBDB dataConnection)
		{
			return dataConnection.ExecuteProc("[dbo].[FullText_Disable]");
		}

		#endregion

		#region FullTextEnable

		public static int FullTextEnable(this TstMallDBDB dataConnection)
		{
			return dataConnection.ExecuteProc("[dbo].[FullText_Enable]");
		}

		#endregion

		#region FullTextIsSupported

		public static IEnumerable<FullTextIsSupportedResult> FullTextIsSupported(this TstMallDBDB dataConnection)
		{
			return dataConnection.QueryProc<FullTextIsSupportedResult>("[dbo].[FullText_IsSupported]");
		}

		public partial class FullTextIsSupportedResult
		{
			public int Value { get; set; }
		}

		#endregion
	}

	public static partial class SqlFunctions
	{
		#region NopGetnotnullnotempty

		[Sql.Function(Name="dbo.nop_getnotnullnotempty", ServerSideOnly=true)]
		public static string NopGetnotnullnotempty(string @p1, string @p2)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SevenSpikesAjaxFiltersProductSorting

		[Sql.Function(Name="dbo.seven_spikes_ajax_filters_product_sorting", ServerSideOnly=true)]
		public static string SevenSpikesAjaxFiltersProductSorting(int? @OrderBy, int? @CategoryIdsCount, int? @ManufacturerId, int? @ParentGroupedProductId)
		{
			throw new InvalidOperationException();
		}

		#endregion
	}

	public static partial class TableExtensions
	{
		public static AclRecord Find(this ITable<AclRecord> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ActivityLog Find(this ITable<ActivityLog> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ActivityLogType Find(this ITable<ActivityLogType> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Address Find(this ITable<Address> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static AddressAttribute Find(this ITable<AddressAttribute> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static AddressAttributeValue Find(this ITable<AddressAttributeValue> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Affiliate Find(this ITable<Affiliate> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static BackInStockSubscription Find(this ITable<BackInStockSubscription> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static BlogComment Find(this ITable<BlogComment> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static BlogPost Find(this ITable<BlogPost> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Campaign Find(this ITable<Campaign> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static CancelRequest Find(this ITable<CancelRequest> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static CancelRequestOrderItemsMapping Find(this ITable<CancelRequestOrderItemsMapping> table, int CancelRequestId, int OrderItemId)
		{
			return table.FirstOrDefault(t =>
				t.CancelRequestId == CancelRequestId &&
				t.OrderItemId     == OrderItemId);
		}

		public static Category Find(this ITable<Category> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static CategoryTemplate Find(this ITable<CategoryTemplate> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static CheckoutAttribute Find(this ITable<CheckoutAttribute> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static CheckoutAttributeValue Find(this ITable<CheckoutAttributeValue> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Country Find(this ITable<Country> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static CrossSellProduct Find(this ITable<CrossSellProduct> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Currency Find(this ITable<Currency> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Customer Find(this ITable<Customer> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static CustomerAddress Find(this ITable<CustomerAddress> table, int CustomerId, int AddressId)
		{
			return table.FirstOrDefault(t =>
				t.CustomerId == CustomerId &&
				t.AddressId  == AddressId);
		}

		public static CustomerAttribute Find(this ITable<CustomerAttribute> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static CustomerAttributeValue Find(this ITable<CustomerAttributeValue> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static CustomerCustomerRoleMapping Find(this ITable<CustomerCustomerRoleMapping> table, int CustomerId, int CustomerRoleId)
		{
			return table.FirstOrDefault(t =>
				t.CustomerId     == CustomerId &&
				t.CustomerRoleId == CustomerRoleId);
		}

		public static CustomerPassword Find(this ITable<CustomerPassword> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static CustomerRole Find(this ITable<CustomerRole> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static DeliveryDate Find(this ITable<DeliveryDate> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Discount Find(this ITable<Discount> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static DiscountAppliedToCategory Find(this ITable<DiscountAppliedToCategory> table, int DiscountId, int CategoryId)
		{
			return table.FirstOrDefault(t =>
				t.DiscountId == DiscountId &&
				t.CategoryId == CategoryId);
		}

		public static DiscountAppliedToManufacturer Find(this ITable<DiscountAppliedToManufacturer> table, int DiscountId, int ManufacturerId)
		{
			return table.FirstOrDefault(t =>
				t.DiscountId     == DiscountId &&
				t.ManufacturerId == ManufacturerId);
		}

		public static DiscountAppliedToProduct Find(this ITable<DiscountAppliedToProduct> table, int DiscountId, int ProductId)
		{
			return table.FirstOrDefault(t =>
				t.DiscountId == DiscountId &&
				t.ProductId  == ProductId);
		}

		public static DiscountRequirement Find(this ITable<DiscountRequirement> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static DiscountUsageHistory Find(this ITable<DiscountUsageHistory> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Download Find(this ITable<Download> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static EmailAccount Find(this ITable<EmailAccount> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ExternalAuthenticationRecord Find(this ITable<ExternalAuthenticationRecord> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ForumsForum Find(this ITable<ForumsForum> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ForumsGroup Find(this ITable<ForumsGroup> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ForumsPost Find(this ITable<ForumsPost> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ForumsPostVote Find(this ITable<ForumsPostVote> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ForumsPrivateMessage Find(this ITable<ForumsPrivateMessage> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ForumsSubscription Find(this ITable<ForumsSubscription> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ForumsTopic Find(this ITable<ForumsTopic> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static GdprConsent Find(this ITable<GdprConsent> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static GdprLog Find(this ITable<GdprLog> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static GenericAttribute Find(this ITable<GenericAttribute> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static GiftCard Find(this ITable<GiftCard> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static GiftCardUsageHistory Find(this ITable<GiftCardUsageHistory> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static HeaderBanner Find(this ITable<HeaderBanner> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static JoinClubOrder Find(this ITable<JoinClubOrder> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Language Find(this ITable<Language> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static LocaleStringResource Find(this ITable<LocaleStringResource> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static LocalizedProperty Find(this ITable<LocalizedProperty> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Log Find(this ITable<Log> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Manufacturer Find(this ITable<Manufacturer> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ManufacturerTemplate Find(this ITable<ManufacturerTemplate> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static MeasureDimension Find(this ITable<MeasureDimension> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static MeasureWeight Find(this ITable<MeasureWeight> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static MessageTemplate Find(this ITable<MessageTemplate> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static News Find(this ITable<News> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static NewsComment Find(this ITable<NewsComment> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static NewsLetterSubscription Find(this ITable<NewsLetterSubscription> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Order Find(this ITable<Order> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static OrderBatchCancelTask Find(this ITable<OrderBatchCancelTask> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static OrderItem Find(this ITable<OrderItem> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static OrderItemUpdate Find(this ITable<OrderItemUpdate> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static OrderNote Find(this ITable<OrderNote> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static PagesDetail Find(this ITable<PagesDetail> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static PermissionRecord Find(this ITable<PermissionRecord> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static PermissionRecordRoleMapping Find(this ITable<PermissionRecordRoleMapping> table, int PermissionRecordId, int CustomerRoleId)
		{
			return table.FirstOrDefault(t =>
				t.PermissionRecordId == PermissionRecordId &&
				t.CustomerRoleId     == CustomerRoleId);
		}

		public static Picture Find(this ITable<Picture> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static PictureBinary Find(this ITable<PictureBinary> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Poll Find(this ITable<Poll> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static PollAnswer Find(this ITable<PollAnswer> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static PollVotingRecord Find(this ITable<PollVotingRecord> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static PredefinedProductAttributeValue Find(this ITable<PredefinedProductAttributeValue> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Product Find(this ITable<Product> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ProductAttribute Find(this ITable<ProductAttribute> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ProductAttributeCombination Find(this ITable<ProductAttributeCombination> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ProductAttributeValue Find(this ITable<ProductAttributeValue> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ProductAvailabilityRange Find(this ITable<ProductAvailabilityRange> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ProductCategoryMapping Find(this ITable<ProductCategoryMapping> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ProductManufacturerMapping Find(this ITable<ProductManufacturerMapping> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ProductPictureMapping Find(this ITable<ProductPictureMapping> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ProductProductAttributeMapping Find(this ITable<ProductProductAttributeMapping> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ProductProductTagMapping Find(this ITable<ProductProductTagMapping> table, int ProductId, int ProductTagId)
		{
			return table.FirstOrDefault(t =>
				t.ProductId    == ProductId &&
				t.ProductTagId == ProductTagId);
		}

		public static ProductReview Find(this ITable<ProductReview> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ProductReviewHelpfulness Find(this ITable<ProductReviewHelpfulness> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ProductReviewReviewTypeMapping Find(this ITable<ProductReviewReviewTypeMapping> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ProductSpecificationAttributeMapping Find(this ITable<ProductSpecificationAttributeMapping> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ProductTag Find(this ITable<ProductTag> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ProductTemplate Find(this ITable<ProductTemplate> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ProductWarehouseInventory Find(this ITable<ProductWarehouseInventory> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static QueuedEmail Find(this ITable<QueuedEmail> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static RecurringPayment Find(this ITable<RecurringPayment> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static RecurringPaymentHistory Find(this ITable<RecurringPaymentHistory> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static RelatedProduct Find(this ITable<RelatedProduct> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ReturnRequest Find(this ITable<ReturnRequest> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ReturnRequestAction Find(this ITable<ReturnRequestAction> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ReturnRequestReason Find(this ITable<ReturnRequestReason> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ReviewType Find(this ITable<ReviewType> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static RewardPointsHistory Find(this ITable<RewardPointsHistory> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ScheduleTask Find(this ITable<ScheduleTask> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SearchTerm Find(this ITable<SearchTerm> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Setting Find(this ITable<Setting> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Shipment Find(this ITable<Shipment> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ShipmentItem Find(this ITable<ShipmentItem> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ShippingByWeightByTotalRecord Find(this ITable<ShippingByWeightByTotalRecord> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ShippingMethod Find(this ITable<ShippingMethod> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ShippingMethodRestriction Find(this ITable<ShippingMethodRestriction> table, int ShippingMethodId, int CountryId)
		{
			return table.FirstOrDefault(t =>
				t.ShippingMethodId == ShippingMethodId &&
				t.CountryId        == CountryId);
		}

		public static ShoppingCartItem Find(this ITable<ShoppingCartItem> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ShortenUrl Find(this ITable<ShortenUrl> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SpecificationAttribute Find(this ITable<SpecificationAttribute> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SpecificationAttributeOption Find(this ITable<SpecificationAttributeOption> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsAsAnywhereSlider Find(this ITable<SsAsAnywhereSlider> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsAsSliderImage Find(this ITable<SsAsSliderImage> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsCCondition Find(this ITable<SsCCondition> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsCConditionGroup Find(this ITable<SsCConditionGroup> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsCConditionStatement Find(this ITable<SsCConditionStatement> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsCCustomerOverride Find(this ITable<SsCCustomerOverride> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsCEntityCondition Find(this ITable<SsCEntityCondition> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsCProductOverride Find(this ITable<SsCProductOverride> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsEsEntitySetting Find(this ITable<SsEsEntitySetting> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsJcJCarousel Find(this ITable<SsJcJCarousel> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsMapEntityMapping Find(this ITable<SsMapEntityMapping> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsMapEntityWidgetMapping Find(this ITable<SsMapEntityWidgetMapping> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsMmMenu Find(this ITable<SsMmMenu> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsMmMenuItem Find(this ITable<SsMmMenuItem> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsPrCategoryPageRibbon Find(this ITable<SsPrCategoryPageRibbon> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsPrProductPageRibbon Find(this ITable<SsPrProductPageRibbon> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsPrProductRibbon Find(this ITable<SsPrProductRibbon> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsPrRibbonPicture Find(this ITable<SsPrRibbonPicture> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsQtTab Find(this ITable<SsQtTab> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsRbCategory Find(this ITable<SsRbCategory> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsRbPost Find(this ITable<SsRbPost> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsRbRelatedBlog Find(this ITable<SsRbRelatedBlog> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsRbRichBlogPostCategoryMapping Find(this ITable<SsRbRichBlogPostCategoryMapping> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsSotdSaleOfTheDayOffer Find(this ITable<SsSotdSaleOfTheDayOffer> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsSpcProductsGroup Find(this ITable<SsSpcProductsGroup> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsSpcProductsGroupItem Find(this ITable<SsSpcProductsGroupItem> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SsSSchedule Find(this ITable<SsSSchedule> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static StateProvince Find(this ITable<StateProvince> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static StockQuantityHistory Find(this ITable<StockQuantityHistory> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Store Find(this ITable<Store> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static StoreMapping Find(this ITable<StoreMapping> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static TaxCategory Find(this ITable<TaxCategory> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static TaxRate Find(this ITable<TaxRate> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static TestIdentity Find(this ITable<TestIdentity> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static TierPrice Find(this ITable<TierPrice> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Topic Find(this ITable<Topic> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static TopicTemplate Find(this ITable<TopicTemplate> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static UrlRecord Find(this ITable<UrlRecord> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Vendor Find(this ITable<Vendor> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static VendorAttribute Find(this ITable<VendorAttribute> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static VendorAttributeValue Find(this ITable<VendorAttributeValue> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static VendorNote Find(this ITable<VendorNote> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Warehouse Find(this ITable<Warehouse> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static WidgetsList Find(this ITable<WidgetsList> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}
	}
}

#pragma warning restore 1591
